{"config":{"lang":["es"],"separator":"[\\s\\-:]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portada del proyecto \u00b7 Datos Abiertos y Desarrollo Web","text":"<p>Bienvenido a este recurso educativo sobre Datos Abiertos de la Junta de Castilla y Le\u00f3n aplicados al desarrollo web. Su objetivo es mostrar, de forma clara y pr\u00e1ctica, c\u00f3mo trabajar con informaci\u00f3n p\u00fablica real para crear aplicaciones \u00fatiles y actuales.</p>"},{"location":"#buscador-con-inteligencia-artificial","title":"\ud83d\udd0e Buscador con inteligencia artificial","text":"Escribe tu consulta: \u00bfQu\u00e9 es un dataset en formato CSV? Enviar Respuesta:"},{"location":"#objetivo-del-proyecto","title":"\ud83c\udfaf Objetivo del proyecto","text":"<p>Acercar al alumnado y a cualquier persona interesada al uso real de los datos abiertos. No se trata de ejemplos inventados, sino de datasets oficiales que obligan a enfrentarse a formatos, estructuras y problemas aut\u00e9nticos, como sucede en el mundo profesional.  </p>"},{"location":"#destinatarios","title":"\ud83d\udc65 Destinatarios","text":"<ul> <li>Estudiantes de Formaci\u00f3n Profesional del \u00e1mbito de la inform\u00e1tica y el desarrollo web.  </li> <li>Desarrolladores que quieran aprender a consumir y visualizar datos abiertos con JavaScript y librer\u00edas habituales.  </li> <li>Personas curiosas interesadas en la transparencia, la innovaci\u00f3n y la reutilizaci\u00f3n de informaci\u00f3n p\u00fablica.</li> </ul>"},{"location":"#como-se-organiza-el-recurso","title":"\ud83d\uddc2\ufe0f C\u00f3mo se organiza el recurso","text":"<p>Cada lecci\u00f3n incluye:</p> <ol> <li>Una introducci\u00f3n te\u00f3rica al formato o tecnolog\u00eda (CSV, XML, JSON, APIs\u2026).  </li> <li>Ejemplos paso a paso con JavaScript puro (vanilla).  </li> <li>Una versi\u00f3n con librer\u00edas externas para simplificar y ampliar las posibilidades.  </li> <li>Una demo pr\u00e1ctica basada en datasets del portal de datos abiertos de la Junta de Castilla y Le\u00f3n.  </li> </ol> <p>El sitio cuenta adem\u00e1s con recursos de apoyo, demos visuales y apartados explicativos sobre la importancia de la transparencia y la participaci\u00f3n ciudadana.</p>"},{"location":"#quien-esta-detras-del-proyecto","title":"\ud83d\udc69\u200d\ud83c\udfeb Qui\u00e9n est\u00e1 detr\u00e1s del proyecto","text":"<p>Soy profesora de Desarrollo Web en Entorno Cliente en un ciclo de Formaci\u00f3n Profesional de Grado Superior. He creado este recurso para acercar al alumnado a los retos reales del desarrollo web, utilizando datos abiertos como herramienta de aprendizaje. Mi prop\u00f3sito es que cada estudiante aprenda no solo a programar, sino tambi\u00e9n a aprovechar la informaci\u00f3n p\u00fablica para crear aplicaciones con impacto social.</p>"},{"location":"01-fundamentos-fetch/","title":"1.1. Fundamentos de <code>fetch</code> en JavaScript","text":"<p>En la web moderna, el m\u00e9todo <code>fetch()</code> permite obtener datos externos de manera sencilla, ya sea un archivo local (CSV, XML, JSON) o una API en Internet. Es la base sobre la que construiremos todas las pr\u00e1cticas de este proyecto.</p>"},{"location":"01-fundamentos-fetch/#que-es-fetch","title":"\ud83d\udccc \u00bfQu\u00e9 es <code>fetch</code>?","text":"<ul> <li>Es una funci\u00f3n global de JavaScript para hacer peticiones HTTP.</li> <li>Devuelve siempre una Promesa, un objeto que representa un valor futuro.</li> <li>Permite trabajar con distintos formatos: JSON, texto, XML, binarios, etc.</li> <li>Sustituye a la antigua API <code>XMLHttpRequest</code>, con una sintaxis m\u00e1s clara.</li> </ul>"},{"location":"01-fundamentos-fetch/#sintaxis-basica","title":"\ud83d\udccc Sintaxis b\u00e1sica","text":"<pre><code>fetch(\"datos.json\")\n  .then(respuesta =&gt; respuesta.json())\n  .then(datos =&gt; {\n    console.log(datos);\n  })\n  .catch(error =&gt; {\n    console.error(\"Error:\", error);\n  });\n</code></pre> <p>En este ejemplo:</p> <ol> <li><code>fetch(\"datos.json\")</code> pide el recurso.</li> <li>El primer <code>.then</code> convierte la respuesta a objeto con <code>.json()</code>.</li> <li>El segundo <code>.then</code> trabaja con los datos ya procesados.</li> <li><code>.catch</code> captura cualquier error de red.</li> </ol>"},{"location":"01-fundamentos-fetch/#el-objeto-response","title":"\ud83d\udccc El objeto <code>Response</code>","text":"<p>La primera promesa resuelta por <code>fetch</code> no es el dato final, sino un objeto <code>Response</code>. Este incluye informaci\u00f3n sobre la petici\u00f3n:</p> <pre><code>fetch(\"datos.json\")\n  .then(respuesta =&gt; {\n    console.log(respuesta.status); // 200, 404, 500...\n    console.log(respuesta.ok);     // true si 200\u2013299\n    console.log(respuesta.headers); // cabeceras HTTP\n  });\n</code></pre> <p>Para acceder al contenido hay que usar m\u00e9todos como:</p> <ul> <li><code>.json()</code> \u2192 para datos en formato JSON.</li> <li><code>.text()</code> \u2192 para CSV, XML o cualquier texto.</li> <li><code>.blob()</code> \u2192 para im\u00e1genes o binarios.</li> <li><code>.arrayBuffer()</code> \u2192 para datos de bajo nivel.</li> </ul>"},{"location":"01-fundamentos-fetch/#uso-con-asyncawait","title":"\ud83d\udccc Uso con <code>async/await</code>","text":"<p>El mismo ejemplo puede escribirse con <code>async/await</code>, m\u00e1s legible:</p> <pre><code>async function cargarDatos() {\n  try {\n    let respuesta = await fetch(\"datos.json\");\n    if (!respuesta.ok) {\n      throw new Error(\"HTTP \" + respuesta.status);\n    }\n    let datos = await respuesta.json();\n    console.log(datos);\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n}\n\ncargarDatos();\n</code></pre> <p>Consejo</p> <p><code>fetch</code> solo lanza error si falla la red. Si la respuesta es <code>404 Not Found</code>, no lanza error: por eso hay que comprobar siempre <code>respuesta.ok</code>.</p>"},{"location":"01-fundamentos-fetch/#ejemplo-con-texto-csv-o-xml","title":"\ud83d\udccc Ejemplo con texto (CSV o XML)","text":"<p>Cuando los datos son texto (CSV o XML), se utiliza <code>.text()</code>:</p> <pre><code>async function cargarCSV() {\n  let respuesta = await fetch(\"datasets/csv/hosteleria-a-domicilio.csv\");\n  let texto = await respuesta.text();\n  console.log(texto);\n}\n\ncargarCSV();\n</code></pre> <p>Despu\u00e9s podremos dividirlo en l\u00edneas o parsearlo con un <code>DOMParser</code>.</p>"},{"location":"01-fundamentos-fetch/#ejemplo-con-imagenes","title":"\ud83d\udccc Ejemplo con im\u00e1genes","text":"<p><code>fetch</code> tambi\u00e9n sirve para descargar im\u00e1genes u otros binarios:</p> <pre><code>async function cargarImagen() {\n  let respuesta = await fetch(\"foto.jpg\");\n  let blob = await respuesta.blob();\n  document.getElementById(\"imagen\").src = URL.createObjectURL(blob);\n}\n</code></pre> <pre><code>&lt;img id=\"imagen\" alt=\"Imagen cargada con fetch\"&gt;\n</code></pre>"},{"location":"01-fundamentos-fetch/#opciones-avanzadas-de-fetch","title":"\ud83d\udccc Opciones avanzadas de <code>fetch</code>","text":"<p>La sintaxis completa permite indicar opciones:</p> <pre><code>fetch(\"https://ejemplo.com/api\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({ usuario: \"Laura\", activo: true })\n});\n</code></pre> <p>Opciones comunes:</p> <ul> <li><code>method</code>: GET, POST, PUT, DELETE.</li> <li><code>headers</code>: cabeceras personalizadas.</li> <li><code>body</code>: datos enviados al servidor.</li> </ul>"},{"location":"01-fundamentos-fetch/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 devuelve siempre <code>fetch()</code> y qu\u00e9 significa que sea una promesa?</li> <li>\u00bfCu\u00e1l es la diferencia entre el objeto <code>Response</code> y los datos procesados con <code>.json()</code> o <code>.text()</code>?</li> <li>\u00bfQu\u00e9 ocurre si no compruebas <code>respuesta.ok</code> antes de usar los datos?</li> <li>Reescribe el ejemplo b\u00e1sico usando <code>async/await</code>.</li> <li>\u00bfCu\u00e1ndo usar\u00edas <code>.blob()</code> en lugar de <code>.json()</code> o <code>.text()</code>?</li> </ol>"},{"location":"PeticionesHttp/","title":"PeticionesHttp","text":""},{"location":"PeticionesHttp/#llamadas-asincronas-con-axios","title":"Llamadas as\u00edncronas con Axios","text":"<p>Axios es una biblioteca basada en Promesas dise\u00f1ada para facilitar las solicitudes HTTP desde el navegador o Node.js. Se utiliza ampliamente en aplicaciones web para interactuar con APIs, gestionar datos externos y manejar procesos como autenticaci\u00f3n, carga de archivos y m\u00e1s.</p>"},{"location":"PeticionesHttp/#principales-caracteristicas-de-axios","title":"Principales caracter\u00edsticas de Axios","text":"<ol> <li> <p>Basado en Promesas:</p> <ul> <li>Utiliza el est\u00e1ndar de Promesas, lo que permite usar <code>async/await</code> para una sintaxis m\u00e1s limpia y comprensible.</li> <li> <p>Compatible con navegadores y Node.js:</p> </li> <li> <p>Funciona tanto en el cliente como en el servidor, permitiendo un uso vers\u00e1til.</p> </li> <li> <p>Transformaci\u00f3n autom\u00e1tica de datos:</p> </li> <li> <p>Convierte los datos enviados y recibidos en formato JSON autom\u00e1ticamente.</p> </li> <li> <p>Interceptores de solicitudes y respuestas:</p> </li> <li> <p>Permite interceptar solicitudes o respuestas para a\u00f1adir l\u00f3gica personalizada (e.g., manejo de errores global o configuraci\u00f3n de tokens).</p> </li> <li> <p>Soporte para operaciones avanzadas:</p> </li> <li> <p>Cancelaci\u00f3n de solicitudes.</p> </li> <li>Env\u00edo de datos con m\u00faltiples partes (form-data).</li> <li>Manejo de redirecciones, tiempos de espera y reintentos.</li> <li> <p>Configuraci\u00f3n predeterminada personalizable:</p> </li> <li> <p>Puedes establecer configuraciones globales (como la URL base o cabeceras) para evitar repeticiones.</p> </li> </ul> </li> </ol>"},{"location":"PeticionesHttp/#instalacion-de-axios","title":"Instalaci\u00f3n de Axios","text":"<p>Si no tienes Axios instalado, puedes a\u00f1adirlo a tu proyecto con npm o yarn:</p> <pre><code>    npm install axios\n</code></pre> <p>o con yarn <pre><code>    yarn add axios\n</code></pre></p>"},{"location":"PeticionesHttp/#uso-basico","title":"Uso b\u00e1sico","text":"<pre><code>    import axios from 'axios';\n\n    // Realizar una solicitud GET\n    axios.get('https://jsonplaceholder.typicode.com/posts')\n      .then(response =&gt; {\n        console.log(response.data); // Datos de la API\n      })\n      .catch(error =&gt; {\n        console.error(error.message); // Manejo de errores\n      });\n</code></pre>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/","title":"0.1. Introducci\u00f3n a los Datos Abiertos de la Junta de Castilla y Le\u00f3n","text":"<p>Los datos abiertos (open data) son informaci\u00f3n p\u00fablica que cualquier persona puede usar, reutilizar y redistribuir libremente. En Castilla y Le\u00f3n, esta iniciativa forma parte de la estrategia de Gobierno Abierto, fomentando la transparencia, la innovaci\u00f3n y la participaci\u00f3n ciudadana.</p>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/#que-son-los-datos-abiertos-y-por-que-son-importantes","title":"\ud83d\udccc \u00bfQu\u00e9 son los datos abiertos y por qu\u00e9 son importantes?","text":"<ul> <li>Permiten que ciudadanos, empresas e instituciones accedan a informaci\u00f3n p\u00fablica para crear valor.</li> <li>Refuerzan la transparencia y la rendici\u00f3n de cuentas.</li> <li>Favorecen la innovaci\u00f3n tecnol\u00f3gica y la creaci\u00f3n de servicios basados en datos.</li> <li>Contribuyen al conocimiento del territorio y al desarrollo social y econ\u00f3mico.</li> </ul>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/#marco-legal-normativa-y-guias-en-castilla-y-leon","title":"\ud83d\udccc Marco legal, normativa y gu\u00edas en Castilla y Le\u00f3n","text":"<p>La iniciativa de datos abiertos en Castilla y Le\u00f3n se apoya en diferentes normas y documentos:</p> <ul> <li>Ley 3/2015, de 4 de marzo, de Transparencia y Participaci\u00f3n Ciudadana de Castilla y Le\u00f3n.</li> <li>Acuerdo 17/2012, de 8 de marzo, para implantar el modelo de Gobierno Abierto.</li> <li>Ley 2/2010, de 11 de marzo, de Derechos de los Ciudadanos en sus relaciones con la Administraci\u00f3n.</li> </ul> <p>Adem\u00e1s, la Junta ofrece:</p> <ul> <li>Gu\u00edas de Open Data sobre formatos, metadatos y publicaci\u00f3n.</li> <li>Buenas pr\u00e1cticas para garantizar calidad, interoperabilidad y accesibilidad de los datos.</li> </ul>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/#el-portal-de-datos-abiertos-de-la-junta","title":"\ud83d\udccc El portal de datos abiertos de la Junta","text":"<p>El portal datosabiertos.jcyl.es ofrece:</p> <ul> <li>Un cat\u00e1logo con cientos de conjuntos de datos descargables.</li> <li>Diversos formatos abiertos: CSV, JSON, XML, GeoJSON, etc.</li> <li>Informaci\u00f3n clara sobre licencias de reutilizaci\u00f3n.</li> <li>Documentaci\u00f3n, gu\u00edas y normativa de referencia.</li> </ul>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/#ventajas-y-retos-al-trabajar-con-datos-abiertos","title":"\ud83d\udccc Ventajas y retos al trabajar con datos abiertos","text":"Ventajas Retos / dificultades Acceso gratuito a datos oficiales Datos incompletos o con errores Variedad tem\u00e1tica (cultura, transporte, medio ambiente\u2026) Formatos inconsistentes Normativa y gu\u00edas de apoyo Requiere limpieza y normalizaci\u00f3n previa Potencial de innovaci\u00f3n educativa Actualizaci\u00f3n no siempre garantizada <p>Tip</p> <p>Antes de trabajar con un dataset revisa su fecha de actualizaci\u00f3n, la frecuencia de publicaci\u00f3n, las licencias, el formato disponible y los metadatos. Esto te ahorrar\u00e1 sorpresas con datos incompletos o desactualizados.</p>"},{"location":"0-presentacion/0-1-introduccion-datos-abiertos/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <p>1. \u00bfQu\u00e9 significa que un dato sea abierto? 2. \u00bfQu\u00e9 leyes respaldan la iniciativa de datos abiertos en Castilla y Le\u00f3n? 3. \u00bfPor qu\u00e9 es clave que los datos est\u00e9n en formatos est\u00e1ndares y accesibles? 4. \u00bfQu\u00e9 criterios usar\u00edas para evaluar si un dataset es \u00fatil en una pr\u00e1ctica web? 5. \u00bfC\u00f3mo pueden beneficiarse los ciudadanos del uso de datos abiertos bien gestionados?</p>"},{"location":"0-presentacion/0-2-gobierno-abierto/","title":"0.2. Gobierno abierto, transparencia y participaci\u00f3n","text":"<p>Los datos abiertos no son solo archivos para programar: forman parte de una filosof\u00eda m\u00e1s amplia llamada Gobierno Abierto. Este enfoque busca que las administraciones p\u00fablicas sean m\u00e1s transparentes, participativas y colaborativas, generando confianza en la ciudadan\u00eda.</p>"},{"location":"0-presentacion/0-2-gobierno-abierto/#transparencia-y-rendicion-de-cuentas","title":"\ud83d\udccc Transparencia y rendici\u00f3n de cuentas","text":"<p>La transparencia consiste en que los ciudadanos puedan conocer qu\u00e9 hace su administraci\u00f3n, c\u00f3mo gasta el dinero p\u00fablico o c\u00f3mo gestiona los servicios. Los datos abiertos hacen posible:</p> <ul> <li>Consultar presupuestos, contratos, subvenciones y estad\u00edsticas.</li> <li>Detectar posibles ineficiencias o duplicidades.</li> <li>Favorecer un control ciudadano real sobre la gesti\u00f3n p\u00fablica.</li> </ul>"},{"location":"0-presentacion/0-2-gobierno-abierto/#participacion-ciudadana","title":"\ud83d\udccc Participaci\u00f3n ciudadana","text":"<p>El acceso libre a la informaci\u00f3n permite que la sociedad participe activamente:</p> <ul> <li>Asociaciones vecinales o colectivos pueden proponer mejoras basadas en datos.</li> <li>Empresas pueden crear servicios que respondan a las necesidades detectadas.</li> <li>Estudiantes e investigadores pueden analizar problemas locales y aportar soluciones.</li> </ul> <p>En este sentido, los datos abiertos refuerzan el papel de la ciudadan\u00eda como copart\u00edcipe de las decisiones p\u00fablicas.</p>"},{"location":"0-presentacion/0-2-gobierno-abierto/#innovacion-y-colaboracion","title":"\ud83d\udccc Innovaci\u00f3n y colaboraci\u00f3n","text":"<p>Abrir datos fomenta tambi\u00e9n la colaboraci\u00f3n entre sectores:</p> <ul> <li>La administraci\u00f3n aporta informaci\u00f3n.</li> <li>La ciudadan\u00eda, las universidades y las empresas crean aplicaciones, visualizaciones y proyectos.</li> <li>Todo ello revierte en mejores servicios y m\u00e1s conocimiento compartido.</li> </ul> <p>Ejemplo: aplicaciones que muestran en tiempo real el transporte p\u00fablico, creadas gracias a la publicaci\u00f3n de los horarios y recorridos en abierto.</p>"},{"location":"0-presentacion/0-2-gobierno-abierto/#impacto-educativo-y-social","title":"\ud83d\udccc Impacto educativo y social","text":"<p>Para el aula, trabajar con datos abiertos tiene un valor especial:</p> <ul> <li>Los y las estudiantes aprenden a interpretar informaci\u00f3n real, m\u00e1s all\u00e1 de ejemplos inventados.</li> <li>Se fomenta el pensamiento cr\u00edtico: no basta con leer un dato, hay que cuestionarlo y contextualizarlo.</li> <li>Se conecta la educaci\u00f3n con la realidad social y los problemas del entorno.</li> </ul>"},{"location":"0-presentacion/0-2-gobierno-abierto/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 relaci\u00f3n existe entre los datos abiertos y la transparencia?</li> <li>\u00bfDe qu\u00e9 manera los datos abiertos pueden mejorar la participaci\u00f3n ciudadana?</li> <li>\u00bfQu\u00e9 papel tiene la colaboraci\u00f3n entre administraciones, empresas y ciudadan\u00eda?</li> <li>\u00bfC\u00f3mo podr\u00edan usarse los datos abiertos en proyectos educativos reales?</li> <li>\u00bfPor qu\u00e9 trabajar con datos abiertos fomenta un pensamiento cr\u00edtico?</li> </ol>"},{"location":"0-presentacion/0-3-tipos-datos/","title":"0.3. Tipos de datos abiertos y formas de acceso","text":"<p>En el portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n no todos los datos se presentan de la misma manera. Seg\u00fan el formato en el que est\u00e9n publicados, necesitaremos estrategias distintas para acceder, interpretar y utilizarlos en nuestras aplicaciones.</p> <p>Los formatos m\u00e1s habituales son: CSV, JSON, XML y APIs REST. Cada uno tiene sus caracter\u00edsticas, ventajas y retos.</p>"},{"location":"0-presentacion/0-3-tipos-datos/#archivos-csv-comma-separated-values","title":"\ud83d\udccc Archivos CSV (Comma Separated Values)","text":"<ul> <li>C\u00f3mo son: archivos de texto donde cada l\u00ednea representa un registro y cada columna est\u00e1 separada por comas (<code>,</code>), aunque a veces se usa el punto y coma (<code>;</code>).</li> <li>Ventajas:<ul> <li>Muy sencillos de entender.</li> <li>Compatibles con Excel, Google Sheets y cualquier editor de texto.</li> <li>Ideales para informaci\u00f3n tabular (listados, estad\u00edsticas, directorios).</li> </ul> </li> <li>Retos:<ul> <li>No incluyen estructura jer\u00e1rquica: solo filas y columnas.</li> <li>A veces es dif\u00edcil manejar campos con comillas o saltos de l\u00ednea.</li> <li>Si el dataset es grande, puede volverse pesado de procesar en el navegador.</li> </ul> </li> </ul>"},{"location":"0-presentacion/0-3-tipos-datos/#archivos-json-javascript-object-notation","title":"\ud83d\udccc Archivos JSON (JavaScript Object Notation)","text":"<ul> <li>C\u00f3mo son: texto estructurado con objetos y arrays anidados, muy usado en aplicaciones web.</li> <li>Ventajas:<ul> <li>Es el formato \u201cnativo\u201d de JavaScript: f\u00e1cil de convertir en objetos del lenguaje.</li> <li>Permite estructuras complejas (listas dentro de listas, objetos dentro de objetos).</li> <li>Ampliamente utilizado en APIs modernas.</li> </ul> </li> <li>Retos:<ul> <li>No es tan c\u00f3modo para abrir en Excel o editores de texto no t\u00e9cnicos.</li> <li>Puede ser m\u00e1s dif\u00edcil de leer a simple vista que un CSV.</li> </ul> </li> </ul>"},{"location":"0-presentacion/0-3-tipos-datos/#archivos-xml-extensible-markup-language","title":"\ud83d\udccc Archivos XML (eXtensible Markup Language)","text":"<ul> <li>C\u00f3mo son: archivos de texto con etiquetas anidadas, muy parecidos al HTML.</li> <li>Ventajas:<ul> <li>Soporta estructuras jer\u00e1rquicas complejas.</li> <li>Est\u00e1ndar muy extendido en la administraci\u00f3n p\u00fablica y organismos internacionales.</li> <li>Puede incluir metadatos y atributos junto con el contenido.</li> </ul> </li> <li>Retos:<ul> <li>Es m\u00e1s verboso y pesado que JSON.</li> <li>Requiere usar parsers para convertirlo a estructuras manejables en JavaScript.</li> <li>Puede incluir espacios de nombres (namespaces) que complican el acceso a los datos.</li> </ul> </li> </ul>"},{"location":"0-presentacion/0-3-tipos-datos/#apis-rest-servicios-de-datos-en-linea","title":"\ud83d\udccc APIs REST (servicios de datos en l\u00ednea)","text":"<ul> <li>C\u00f3mo son: interfaces web que permiten consultar los datos directamente desde los servidores de la administraci\u00f3n.</li> <li>Ventajas:<ul> <li>Siempre devuelven la informaci\u00f3n actualizada en tiempo real.</li> <li>Permiten filtrar, paginar o buscar datos concretos con par\u00e1metros en la URL.</li> <li>Normalmente devuelven datos en JSON o XML.</li> </ul> </li> <li>Retos:<ul> <li>Requieren conexi\u00f3n a Internet en el momento de la consulta.</li> <li>A veces necesitan cabeceras espec\u00edficas o autenticaci\u00f3n con tokens.</li> <li>Si la API cambia su formato, el c\u00f3digo de nuestra aplicaci\u00f3n debe adaptarse.</li> </ul> </li> </ul> <p>Consejo</p> <p>Como desarrolladoras y desarrolladores, es importante elegir el formato adecuado para cada caso de uso:</p> <ul> <li>Si necesitas listas simples \u2192 CSV.  </li> <li>Si quieres estructuras jer\u00e1rquicas y directas para JavaScript \u2192 JSON.  </li> <li>Si trabajas con fuentes institucionales antiguas \u2192 XML.  </li> <li>Si necesitas datos actualizados al momento y filtrables \u2192 API REST.  </li> </ul>"},{"location":"0-presentacion/0-3-tipos-datos/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencias fundamentales hay entre CSV y JSON?</li> <li>\u00bfQu\u00e9 ventajas tiene usar JSON frente a XML en aplicaciones web modernas?</li> <li>\u00bfPor qu\u00e9 una API puede ser m\u00e1s \u00fatil que descargar un archivo est\u00e1tico?</li> <li>\u00bfQu\u00e9 problemas podr\u00edan surgir al trabajar con un CSV de gran tama\u00f1o en el navegador?</li> <li>Si quisieras mostrar un mapa con ubicaciones de monumentos, \u00bfqu\u00e9 formato te resultar\u00eda m\u00e1s pr\u00e1ctico y por qu\u00e9?</li> </ol>"},{"location":"1-fetch/1-1-fetch-leccion/","title":"1.1. Fundamentos de <code>fetch</code>, promesas y <code>async/await</code>","text":"<p>Antes de poder trabajar con datos abiertos (CSV, JSON, XML o APIs), necesitamos saber c\u00f3mo traer esos datos a la web usando JavaScript. El navegador nos proporciona la funci\u00f3n <code>fetch</code>, que permite realizar solicitudes HTTP de forma sencilla y moderna.</p> <p>En esta lecci\u00f3n vamos a detenernos en qu\u00e9 es <code>fetch</code>, qu\u00e9 papel juegan las promesas, qu\u00e9 ventajas ofrece <code>async/await</code> y qu\u00e9 limitaciones debemos tener en cuenta al trabajar con este enfoque.</p>"},{"location":"1-fetch/1-1-fetch-leccion/#que-es-fetch","title":"\ud83d\udccc \u00bfQu\u00e9 es <code>fetch</code>?","text":"<p><code>fetch(url)</code> es una funci\u00f3n nativa de JavaScript que nos permite pedir recursos a un servidor. Devuelve una promesa que se resuelve en un objeto <code>Response</code>, con m\u00e9todos para acceder al contenido.</p> <p>Ejemplo b\u00e1sico:</p> <pre><code>fetch(\"datasets/csv/hosteleria-a-domicilio.csv\")\n  .then(res =&gt; res.text())\n  .then(texto =&gt; console.log(texto))\n  .catch(err =&gt; console.error(\"Error:\", err));\n</code></pre> <p>En este caso:</p> <ul> <li><code>res.text()</code> obtiene el archivo como texto.</li> <li>Usamos <code>.then()</code> para manejar el resultado cuando llega.</li> <li>Si algo falla (por ejemplo, la ruta es incorrecta), el <code>.catch()</code> captura el error.</li> </ul>"},{"location":"1-fetch/1-1-fetch-leccion/#que-es-una-promesa","title":"\ud83d\udccc \u00bfQu\u00e9 es una promesa?","text":"<p>Una promesa es un objeto que representa un valor que a\u00fan no conocemos pero que estar\u00e1 disponible en el futuro.</p> <p>Estados de una promesa:</p> <ol> <li><code>pending</code> \u2192 pendiente.</li> <li><code>fulfilled</code> \u2192 resuelta con \u00e9xito.</li> <li><code>rejected</code> \u2192 rechazada por error.</li> </ol> <p>Las promesas nos permiten no bloquear la p\u00e1gina mientras esperamos datos del servidor.</p>"},{"location":"1-fetch/1-1-fetch-leccion/#async-y-await","title":"\ud83d\udccc <code>async</code> y <code>await</code>","text":"<p>En lugar de encadenar muchos <code>.then()</code>, podemos escribir c\u00f3digo m\u00e1s claro con <code>async/await</code>.</p> <p>Ejemplo equivalente al anterior:</p> <pre><code>async function cargarCSV() {\n  try {\n    let res = await fetch(\"datasets/csv/hosteleria-a-domicilio.csv\");\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    let texto = await res.text();\n    console.log(texto);\n  } catch (err) {\n    console.error(\"Error:\", err);\n  }\n}\n</code></pre> <p>Ventajas de este enfoque:</p> <ul> <li>El c\u00f3digo se lee \u201cde arriba a abajo\u201d, como si fuera s\u00edncrono.</li> <li>M\u00e1s f\u00e1cil de mantener en programas largos.</li> <li>El <code>try/catch</code> captura los errores de forma ordenada.</li> </ul>"},{"location":"1-fetch/1-1-fetch-leccion/#particularidades-al-trabajar-con-fetch","title":"\ud83d\udccc Particularidades al trabajar con <code>fetch</code>","text":"<ul> <li>Protocolos seguros: algunos navegadores bloquean peticiones desde <code>http://</code> si la p\u00e1gina est\u00e1 en <code>https://</code>.</li> <li>CORS: el servidor debe permitir que otros sitios consuman sus datos (algo que el portal de Datos Abiertos de JCyL ya hace).</li> <li>Rutas relativas: aseg\u00farate de que apuntas a la carpeta correcta dentro del proyecto.</li> <li>Servidor local: abrir archivos con <code>file://</code> no funciona; necesitas un servidor local (<code>mkdocs serve</code>, Live Server, etc.).</li> </ul>"},{"location":"1-fetch/1-1-fetch-leccion/#ventajas-de-usar-fetch","title":"\ud83d\udccc Ventajas de usar <code>fetch</code>","text":"<ul> <li>API nativa: no requiere instalar librer\u00edas.</li> <li>Sencillez: se adapta a la mayor\u00eda de casos de uso.</li> <li>Flexible: permite trabajar con texto, JSON, blobs, etc.</li> <li>Compatible: funciona en todos los navegadores modernos.</li> </ul>"},{"location":"1-fetch/1-1-fetch-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<ul> <li>No aborta por defecto: necesitamos <code>AbortController</code> si queremos cancelar una petici\u00f3n.</li> <li>Sin soporte directo para timeout: hay que implementarlo manualmente.</li> <li>Gesti\u00f3n de errores limitada: solo da error de red; para c\u00f3digos como 404 o 500 debemos comprobar <code>res.ok</code>.</li> <li>Complejidad con peticiones encadenadas: sin <code>async/await</code>, los <code>.then()</code> pueden volverse dif\u00edciles de leer.</li> </ul> <p>Consejo</p> <p>Cuando trabajes con datos abiertos:</p> <ul> <li>Usa siempre <code>try/catch</code> o <code>.catch()</code> para manejar errores.</li> <li>Comprueba <code>res.ok</code> para detectar respuestas HTTP incorrectas.</li> <li>Si los datos son muy pesados, considera paginarlos o mostrarlos poco a poco.</li> </ul>"},{"location":"1-fetch/1-1-fetch-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 devuelve <code>fetch</code> cuando lo llamamos con una URL?</li> <li>\u00bfQu\u00e9 diferencia hay entre usar <code>.then()</code> y <code>async/await</code>?</li> <li>\u00bfCu\u00e1les son los tres estados posibles de una promesa?</li> <li>\u00bfPor qu\u00e9 no funciona abrir un HTML con <code>file://</code> al usar <code>fetch</code>?</li> <li>\u00bfQu\u00e9 comprobaci\u00f3n deber\u00edas hacer siempre con <code>res.ok</code> tras una petici\u00f3n?</li> </ol>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/","title":"1.2. Ejemplo con JavaScript puro (vanilla) \u2013 <code>fetch</code> y promesas","text":"<p>En este ejemplo aprender\u00e1s a cargar datos desde un archivo remoto usando la funci\u00f3n <code>fetch</code> del navegador. Usaremos dos ejemplos reales del portal de datos abiertos de Castilla y Le\u00f3n:</p> <ul> <li>Un archivo TXT con metadatos de fotogramas a\u00e9reos hist\u00f3ricos (<code>Leeme.txt</code>).</li> <li>Un archivo JSON con las marcas de calidad agroalimentarias de la regi\u00f3n (<code>garant.json</code>).</li> </ul>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Llamar a <code>fetch</code> indicando la URL del recurso.</li> <li>Esperar la respuesta y comprobar que sea correcta (<code>res.ok</code>).</li> <li>Convertir el contenido a texto (<code>.text()</code>) o a objeto (<code>.json()</code>).</li> <li>Usar el resultado: mostrarlo en consola o recorrerlo.</li> <li>Gestionar errores con <code>.catch()</code> o <code>try/catch</code>.</li> </ol>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#1-cargar-un-archivo-de-texto-fotogramas-aereos","title":"1) Cargar un archivo de texto (fotogramas a\u00e9reos)","text":"<pre><code>async function cargarTXT() {\n  try {\n    let res = await fetch(\"https://ftp.itacyl.es/cartografia/03_FotogramasAereos/Vuelo-Americano_1956-57/Leeme.txt\");\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    let texto = await res.text();\n    console.log(\"Contenido del TXT:\", texto.slice(0, 300) + \"...\");\n  } catch (err) {\n    console.error(\"Error al cargar el TXT:\", err);\n  }\n}\n\ncargarTXT();\n</code></pre> <p>Aqu\u00ed usamos <code>.text()</code> porque el archivo es un documento de texto plano. Mostramos solo los primeros 300 caracteres para no llenar la consola.</p>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#2-cargar-un-archivo-json-marcas-de-calidad","title":"2) Cargar un archivo JSON (marcas de calidad)","text":"<pre><code>async function cargarJSON() {\n  try {\n    let res = await fetch(\"https://servicios.itacyl.es/resources/public/opendata/garant.json\");\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    let datos = await res.json();\n    console.log(\"Objeto JSON completo:\", datos);\n  } catch (err) {\n    console.error(\"Error al cargar el JSON:\", err);\n  }\n}\n\ncargarJSON();\n</code></pre> <p>Aqu\u00ed usamos <code>.json()</code> porque el archivo contiene datos en formato JSON. El resultado ya es un objeto JavaScript que podemos recorrer.</p>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#3-recorrer-el-json-y-mostrar-datos-concretos","title":"3) Recorrer el JSON y mostrar datos concretos","text":"<pre><code>async function mostrarMarcas() {\n  let res = await fetch(\"https://servicios.itacyl.es/resources/public/opendata/garant.json\");\n  let datos = await res.json();\n\n  datos.slice(0, 5).forEach(marca =&gt; {\n    console.log(`\ud83e\udd47 ${marca.nombre} (${marca.tipo})`);\n  });\n}\n\nmostrarMarcas();\n</code></pre> <p>Esto imprime en consola las 5 primeras marcas de calidad con su nombre y tipo.</p> <p>Consejo</p> <p>Cuando trabajes con <code>fetch</code>: * Usa <code>await res.text()</code> para ficheros planos como <code>.txt</code> o <code>.csv</code>. * Usa <code>await res.json()</code> solo si el archivo realmente es JSON. * Comprueba siempre <code>res.ok</code> para detectar errores como <code>404 Not Found</code>. * Muestra solo una parte con <code>.slice()</code> si el dataset es muy grande.</p>"},{"location":"1-fetch/1-2-fetch-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre usar <code>.text()</code> y <code>.json()</code>?</li> <li>\u00bfQu\u00e9 significa <code>res.ok</code> y por qu\u00e9 es importante comprobarlo?</li> <li>\u00bfQu\u00e9 ocurre si intentamos usar <code>.json()</code> en un TXT?</li> <li>\u00bfC\u00f3mo mostrar\u00edas solo las primeras 10 l\u00edneas de un TXT cargado con <code>fetch</code>?</li> <li>\u00bfPor qu\u00e9 es \u00fatil usar datasets reales (como fotogramas a\u00e9reos o marcas de calidad) en vez de ejemplos inventados?</li> </ol>"},{"location":"2-csv/2-1-csv-leccion/","title":"2.1. Consumo de datos en formato CSV (Datos Abiertos JCyL)","text":"<p>El portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n publica numerosos conjuntos en formato CSV. Este formato es uno de los m\u00e1s sencillos y extendidos, y por eso se convierte en un punto de partida ideal para aprender a consumir datos en la web.</p> <p>En esta lecci\u00f3n vamos a detenernos en qu\u00e9 es un CSV, cu\u00e1les son sus caracter\u00edsticas principales, qu\u00e9 ventajas ofrece, qu\u00e9 problemas puede plantear y c\u00f3mo lo utilizaremos en nuestras aplicaciones. En los siguientes apartados de la unidad veremos c\u00f3mo procesarlo con JavaScript puro y con librer\u00edas externas, pero ahora nos centraremos en comprender bien el formato.</p>"},{"location":"2-csv/2-1-csv-leccion/#que-es-un-csv","title":"\ud83d\udccc \u00bfQu\u00e9 es un CSV?","text":"<p>CSV significa Comma Separated Values (valores separados por comas). Un archivo CSV es, en esencia, una tabla guardada como texto plano: - Cada l\u00ednea corresponde a un registro (una fila de la tabla). - Los valores de cada columna se separan con un car\u00e1cter delimitador, normalmente una coma <code>,</code>.  </p> <p>Ejemplo simplificado:</p> <pre><code>Nombre,Localidad,Telefono\nBar La Plaza,Salamanca,923123456\nCaf\u00e9 Sol,Valladolid,983654321\n</code></pre> <p>Aqu\u00ed vemos tres registros: la primera l\u00ednea son los nombres de las columnas (Nombre, Localidad, Tel\u00e9fono) y las siguientes son los datos reales.</p>"},{"location":"2-csv/2-1-csv-leccion/#por-que-se-utiliza-tanto-en-datos-abiertos","title":"\ud83d\udccc \u00bfPor qu\u00e9 se utiliza tanto en datos abiertos?","text":"<p>El CSV se ha convertido en un est\u00e1ndar de facto en la publicaci\u00f3n de datos por varias razones:</p> <ol> <li>Simplicidad: es texto plano, lo que significa que cualquier editor puede abrirlo (desde el Bloc de notas hasta Excel).  </li> <li>Compatibilidad: casi todas las aplicaciones de hojas de c\u00e1lculo y bases de datos aceptan CSV.  </li> <li>Ligereza: ocupa poco espacio en comparaci\u00f3n con otros formatos m\u00e1s complejos como XML o JSON.  </li> <li>Transparencia: al ser texto, cualquier persona puede inspeccionarlo y comprobar r\u00e1pidamente qu\u00e9 contiene.  </li> <li>Interoperabilidad: puede ser le\u00eddo desde programas escritos en casi cualquier lenguaje de programaci\u00f3n.</li> </ol> <p>En los datos abiertos de Castilla y Le\u00f3n encontrar\u00e1s CSV de tem\u00e1ticas muy diversas: desde listados de hosteler\u00eda a domicilio (que usaremos aqu\u00ed) hasta cat\u00e1logos de monumentos, transporte, educaci\u00f3n o medio ambiente.</p>"},{"location":"2-csv/2-1-csv-leccion/#particularidades-de-los-csv-en-el-portal-de-cyl","title":"\ud83d\udccc Particularidades de los CSV en el portal de CyL","text":"<p>Aunque la idea es sencilla, los CSV de datos abiertos presentan algunos matices importantes que conviene conocer:</p> <ul> <li>Separador: aunque el nombre dice coma, en Espa\u00f1a es habitual usar punto y coma (<code>;</code>) como separador, porque la coma se utiliza para decimales.  </li> <li>Codificaci\u00f3n: los archivos suelen estar en UTF-8, pero no siempre; si ves s\u00edmbolos raros en las tildes o la \u00f1, puede ser un problema de codificaci\u00f3n.  </li> <li>Cabeceras: la primera l\u00ednea incluye los nombres de las columnas, lo cual es muy \u00fatil para automatizar el parseo.  </li> <li>Valores especiales: a veces hay celdas vac\u00edas o con valores como <code>NULL</code>, que deber\u00e1s interpretar correctamente.  </li> <li>Comillas: cuando una celda contiene comas o saltos de l\u00ednea, ese campo aparece entrecomillado, por ejemplo: <pre><code>\"Bar, Cafeter\u00eda y Restaurante\",Salamanca,923123456\n</code></pre></li> <li>Volumen de datos: algunos CSV tienen miles de registros; cargarlos enteros en una tabla web puede ralentizar la aplicaci\u00f3n.</li> </ul>"},{"location":"2-csv/2-1-csv-leccion/#ventajas-de-usar-csv","title":"\ud83d\udccc Ventajas de usar CSV","text":"<ul> <li>Acceso universal: cualquier persona puede abrir un CSV sin necesidad de programas especializados.  </li> <li>Formato abierto: no est\u00e1 ligado a una aplicaci\u00f3n propietaria.  </li> <li>Facilidad de an\u00e1lisis: se integra sin esfuerzo con hojas de c\u00e1lculo y bases de datos.  </li> <li>Rapidez en la web: leer un archivo de texto es m\u00e1s r\u00e1pido y ligero que otros formatos complejos.  </li> <li>Consistencia: casi todos los datasets abiertos en Espa\u00f1a incluyen al menos una versi\u00f3n en CSV, lo que garantiza que lo encontrar\u00e1s en la mayor\u00eda de proyectos.</li> </ul>"},{"location":"2-csv/2-1-csv-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<p>Sin embargo, no todo son ventajas:</p> <ul> <li>Un CSV no guarda jerarqu\u00eda: no podemos representar estructuras complejas (por ejemplo, un monumento con varias fotos y varias direcciones).  </li> <li>El manejo de comillas y saltos de l\u00ednea puede complicar el parseo manual.  </li> <li>Si hay miles de filas, la visualizaci\u00f3n directa en el navegador puede ser lenta.  </li> <li>Es f\u00e1cil que los nombres de las columnas cambien entre versiones, lo que rompe el c\u00f3digo que las consume.</li> </ul> <p>Por eso, aunque empezaremos con CSV, m\u00e1s adelante veremos c\u00f3mo trabajar con JSON, XML y APIs REST, que resuelven algunos de estos problemas.</p> <p>Consejo</p> <p>Antes de empezar a programar, abre siempre el CSV en un editor: - Comprueba qu\u00e9 separador usa (<code>;</code> o <code>,</code>). - Verifica que los acentos y e\u00f1es se vean bien (codificaci\u00f3n UTF-8). - Identifica cu\u00e1les son las columnas clave (nombre, municipio, tel\u00e9fono\u2026). - Revisa si hay valores vac\u00edos o inconsistentes.  </p> <p>Este an\u00e1lisis previo evita muchos errores al procesar los datos despu\u00e9s.</p>"},{"location":"2-csv/2-1-csv-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>Explica con tus palabras qu\u00e9 es un archivo CSV.  </li> <li>\u00bfPor qu\u00e9 es tan habitual en los portales de datos abiertos como el de Castilla y Le\u00f3n?  </li> <li>\u00bfQu\u00e9 diferencias hay entre un CSV y un JSON?  </li> <li>\u00bfQu\u00e9 problemas pr\u00e1cticos pueden encontrarse al procesar un CSV real?  </li> <li>\u00bfQu\u00e9 pasos seguir\u00edas para mostrar en una p\u00e1gina web una tabla con datos de un CSV?</li> </ol>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/","title":"2.2. Ejemplo con JavaScript puro (vanilla)","text":"<p>En este apartado vamos a ver c\u00f3mo procesar un CSV utilizando solo JavaScript puro, sin librer\u00edas externas. Trabajaremos con el dataset de hosteler\u00eda a domicilio de la Junta de Castilla y Le\u00f3n.</p>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Cargar el archivo con <code>fetch</code>.  </li> <li>Obtener el contenido como texto usando <code>.text()</code>.  </li> <li>Separar en l\u00edneas: cada l\u00ednea ser\u00e1 un registro.  </li> <li>Detectar la primera l\u00ednea como cabecera (nombres de columnas).  </li> <li>Mapear las l\u00edneas restantes a objetos JavaScript usando las cabeceras como claves.  </li> <li>Mostrar los datos en la consola o en una tabla HTML sencilla.</li> </ol>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#1-cargar-el-csv-y-convertirlo-en-texto","title":"1) Cargar el CSV y convertirlo en texto","text":"<pre><code>async function cargarCSV() {\n  let respuesta = await fetch(\"datasets/csv/hosteleria-a-domicilio.csv\");\n  let texto = await respuesta.text();\n  console.log(texto);\n}\n````\n\nEsto nos muestra todo el contenido del CSV en bruto.\n\n---\n\n### 2) Separar en l\u00edneas y extraer las cabeceras\n\n```js\nlet lineas = texto.trim().split(\"\\n\");\nlet cabeceras = lineas.shift().split(\",\");\n</code></pre> <ul> <li><code>lineas</code> es un array con todas las filas de datos.</li> <li><code>cabeceras</code> es un array con los nombres de las columnas.</li> </ul>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#3-convertir-cada-linea-en-un-objeto","title":"3) Convertir cada l\u00ednea en un objeto","text":"<pre><code>let datos = lineas.map(linea =&gt; {\n  let valores = linea.split(\",\");\n  return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n});\n</code></pre> <p>De esta manera obtenemos un array de objetos como este:</p> <pre><code>[\n  { \"Nombre\": \"Bar La Plaza\", \"Localidad\": \"Salamanca\", \"Telefono\": \"923123456\" },\n  { \"Nombre\": \"Caf\u00e9 Sol\", \"Localidad\": \"Valladolid\", \"Telefono\": \"983654321\" }\n]\n</code></pre>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#4-renderizar-una-tabla-en-html","title":"4) Renderizar una tabla en HTML","text":"<pre><code>function renderTabla(datos, columnas) {\n  let tabla = document.createElement(\"table\");\n\n  // cabecera\n  let thead = document.createElement(\"thead\");\n  let tr = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    let th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    tr.appendChild(th);\n  });\n  thead.appendChild(tr);\n  tabla.appendChild(thead);\n\n  // filas\n  let tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    let tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      let td = document.createElement(\"td\");\n      td.textContent = fila[col];\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  document.body.appendChild(tabla);\n}\n</code></pre> <p>Consejo</p> <p>Este enfoque es ideal para entender c\u00f3mo funciona el CSV por dentro y para datasets sencillos. Sin embargo, con archivos muy grandes o con formatos m\u00e1s complejos (celdas con comillas, saltos de l\u00ednea dentro de un campo\u2026) puede resultar limitado.</p>"},{"location":"2-csv/2-2-csv-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 funci\u00f3n cumple <code>fetch</code> en este ejemplo?</li> <li>\u00bfQu\u00e9 guardamos en la variable <code>cabeceras</code>?</li> <li>\u00bfC\u00f3mo transformamos cada l\u00ednea de texto en un objeto JavaScript?</li> <li>\u00bfPor qu\u00e9 se usa <code>Object.fromEntries</code> en el c\u00f3digo?</li> <li>\u00bfQu\u00e9 ventajas tiene mostrar los datos en una tabla HTML en lugar de solo en consola?</li> </ol>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/","title":"2.3. Ejemplo con librer\u00eda (Papa Parse + Tabulator)","text":"<p>En este apartado vamos a ver c\u00f3mo procesar un CSV utilizando librer\u00edas externas para simplificar el parseo y la visualizaci\u00f3n. Trabajaremos con el dataset de hosteler\u00eda a domicilio de la Junta de Castilla y Le\u00f3n en formato CSV.</p>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#como-incluir-las-librerias","title":"\ud83d\udce6 C\u00f3mo incluir las librer\u00edas","text":"<p>En este curso usaremos CDN (no hace falta <code>npm</code>). Inserta los scripts/estilos en tu HTML antes de tu c\u00f3digo:</p> <pre><code>&lt;!-- Papa Parse: parseo CSV robusto --&gt;\n&lt;script src=\"https://unpkg.com/papaparse@5.4.1/papaparse.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Tabulator: tabla interactiva --&gt;\n&lt;link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/tabulator-tables@6.2.5/dist/css/tabulator.min.css\"&gt;\n&lt;script src=\"https://unpkg.com/tabulator-tables@6.2.5/dist/js/tabulator.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Tu script --&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Consejo</p> <p>Si luego empaquetas con Vite/Webpack, podr\u00e1s <code>import Papa from \"papaparse\"</code> y <code>import { Tabulator } from \"tabulator-tables\"</code>.</p>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#flujo-de-trabajo-con-libreria","title":"\ud83d\udccc Flujo de trabajo con librer\u00eda","text":"<ol> <li>Incluir Papa Parse y Tabulator desde CDN.</li> <li>Descargar el CSV con <code>fetch(url).then(res =&gt; res.text())</code>.</li> <li>Parsear el texto con <code>Papa.parse</code> (cabeceras, l\u00edneas vac\u00edas, etc.).</li> <li>Crear una tabla interactiva con Tabulator (columnas, paginaci\u00f3n, ordenaci\u00f3n).</li> <li>Gestionar errores y mostrar un estado accesible.</li> </ol>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"2-csv/2-3-csv-ejemplo-libreria/#1-cargar-y-parsear-el-csv-con-papa-parse","title":"1) Cargar y parsear el CSV con Papa Parse","text":"<pre><code>// Ruta del CSV (ajusta a tu estructura)\nconst URL_CSV = \"datasets/csv/hosteleria-a-domicilio.csv\";\n\nasync function cargarCSV() {\n  const res = await fetch(URL_CSV, { cache: \"no-cache\" });\n  if (!res.ok) throw new Error(`HTTP ${res.status}`);\n  const texto = await res.text();\n\n  // Parseo robusto\n  const parsed = Papa.parse(texto, {\n    header: true,         // primera l\u00ednea = cabeceras\n    skipEmptyLines: true, // ignora filas vac\u00edas\n    dynamicTyping: false, // valores como texto (puedes ajustar a true si lo necesitas)\n    delimiter: \"\"         // autodetecta (,, ;, etc.)\n  });\n\n  if (parsed.errors?.length) {\n    console.warn(\"Avisos Papa Parse:\", parsed.errors.slice(0, 5));\n  }\n\n  return parsed.data; // array de objetos\n}\n</code></pre>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#2-generar-columnas-automaticamente-para-tabulator","title":"2) Generar columnas autom\u00e1ticamente para Tabulator","text":"<pre><code>function columnasDesdeDatos(data) {\n  const ejemplo = data[0] ?? {};\n  return Object.keys(ejemplo).map(k =&gt; ({\n    title: k,   // etiqueta visible\n    field: k,   // clave del objeto\n    sorter: \"string\",\n    headerHozAlign: \"left\",\n    hozAlign: \"left\"\n  }));\n}\n</code></pre>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#3-pintar-la-tabla-con-tabulator","title":"3) Pintar la tabla con Tabulator","text":"<pre><code>function renderTabla(selector, data) {\n  const columns = columnasDesdeDatos(data);\n\n  return new Tabulator(selector, {\n    data,\n    columns,\n    layout: \"fitDataStretch\",\n    pagination: true,\n    paginationSize: 10,\n    paginationSizeSelector: [10, 25, 50, 100],\n    placeholder: \"No hay datos que mostrar\",\n    progressiveRender: true,\n    progressiveRenderSize: 200,\n    columnDefaults: { headerHozAlign: \"left\", hozAlign: \"left\" }\n  });\n}\n</code></pre>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#4-busqueda-global-opcional","title":"4) B\u00fasqueda global (opcional)","text":"<pre><code>function activarBusquedaGlobal(input, table) {\n  input.addEventListener(\"input\", () =&gt; {\n    const term = input.value.trim().toLowerCase();\n    if (!term) return table.clearFilter(true);\n\n    table.setFilter((row) =&gt; {\n      const obj = row.getData();\n      return Object.values(obj).some(v =&gt;\n        String(v ?? \"\").toLowerCase().includes(term));\n    });\n  });\n}\n</code></pre>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  try {\n    const datos = await cargarCSV();\n    const tabla = renderTabla(\"#tabla\", datos);\n\n    // Si tienes un &lt;input id=\"q\"&gt; en tu HTML\n    const q = document.getElementById(\"q\");\n    if (q) activarBusquedaGlobal(q, tabla);\n\n  } catch (err) {\n    console.error(\"Error al cargar/mostrar CSV:\", err);\n    // Muestra un mensaje accesible en la p\u00e1gina si quieres\n    const status = document.getElementById(\"status\");\n    if (status) status.textContent = \"\u274c Error al cargar el CSV. Comprueba la ruta y usa un servidor local.\";\n  }\n})();\n</code></pre> <p>Consejo</p> <p>Rutas relativas: si tu HTML est\u00e1 en <code>2-csv/demo/index.html</code> y los datos en <code>datasets/csv/\u2026</code>, la ruta t\u00edpica ser\u00e1 <code>../../datasets/csv/hosteleria-a-domicilio.csv</code>. Verifica siempre la ruta final en DevTools \u2192 pesta\u00f1a Network.</p>"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla (split + parseo propio) Con librer\u00edas (Papa Parse + Tabulator) Parseo de CSV Manual (<code>split</code>, comillas, saltos de l\u00ednea, separador) Autom\u00e1tico y robusto (cabeceras, comillas, autodetecci\u00f3n de separador, l\u00edneas vac\u00edas) Tipado de valores Manual (hay que convertir n\u00fameros/booleanos si se desea) <code>dynamicTyping</code> opcional (convierte n\u00fameros/booleanos) Errores de formato A tu cargo (tienes que manejarlos) Reporte de errores/advertencias en <code>parsed.errors</code> Tabla y UI Manual (construcci\u00f3n de <code>&lt;table&gt;</code>, ordenaci\u00f3n/filtrado a mano) Tabulator ofrece paginaci\u00f3n, ordenaci\u00f3n, filtros, responsive C\u00f3digo repetitivo M\u00e1s l\u00edneas (plantillas de tabla, eventos, filtros) Menos repetici\u00f3n: configuraci\u00f3n y listo Dependencias Ninguna 2 dependencias (ligeras) Curva de aprendizaje Muy baja Muy baja (configurar opciones y columnas)"},{"location":"2-csv/2-3-csv-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 par\u00e1metros principales has usado en <code>Papa.parse</code> y para qu\u00e9 sirven?</li> <li>\u00bfC\u00f3mo generas din\u00e1micamente las columnas de Tabulator a partir de los datos?</li> <li>\u00bfQu\u00e9 ventaja ofrece Tabulator frente a crear una tabla HTML \u201ca mano\u201d?</li> <li>\u00bfC\u00f3mo implementar\u00edas una b\u00fasqueda global sobre todas las columnas?</li> <li>Si el CSV es muy grande, \u00bfqu\u00e9 opciones de Tabulator ayudan a que sea fluido?</li> </ol>"},{"location":"2-csv/2-4-csv-demo/","title":"2.4. Demo: Hosteler\u00eda a domicilio (CSV)","text":"<p>Ya hemos visto c\u00f3mo procesar un CSV con JavaScript puro y c\u00f3mo simplificar la tarea usando librer\u00edas externas como Papa Parse y Tabulator. Es momento de ver el resultado final funcionando en una p\u00e1gina real.</p> <p>En esta demo utilizamos el dataset de hosteler\u00eda a domicilio del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n. El sistema carga el archivo CSV, lo parsea autom\u00e1ticamente y lo muestra en una tabla interactiva con b\u00fasqueda, ordenaci\u00f3n y paginaci\u00f3n.</p>"},{"location":"2-csv/2-4-csv-demo/#que-encontraras-en-la-demo","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en la demo","text":"<ul> <li>Carga real del dataset de hosteler\u00eda en formato CSV.  </li> <li>Parseo con Papa Parse, que convierte el archivo en un array de objetos.  </li> <li>Visualizaci\u00f3n con Tabulator, que genera una tabla accesible y din\u00e1mica.  </li> <li>Controles de b\u00fasqueda global y cambio de tama\u00f1o de p\u00e1gina.  </li> <li>Manejo de errores de red y mensajes accesibles para el usuario.</li> </ul> <p>Consejo</p> <p>Recuerda abrir el proyecto con un servidor local (por ejemplo, la extensi\u00f3n Live Server en VS Code). Si intentas abrirlo directamente con <code>file://</code>, el navegador puede bloquear la carga del CSV por motivos de seguridad.</p>"},{"location":"2-csv/2-4-csv-demo/#acceso-a-la-demo","title":"\ud83d\udccc Acceso a la demo","text":"<p>\u25b6\ufe0f Abrir demo en vivo{ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"2-csv/2-4-csv-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 dos librer\u00edas se han utilizado en la demo y para qu\u00e9 sirve cada una?  </li> <li>\u00bfQu\u00e9 diferencia principal observas entre esta tabla y la que generamos con JavaScript puro?  </li> <li>\u00bfPor qu\u00e9 es importante incluir mensajes de error y estado en una aplicaci\u00f3n que consume datos externos?  </li> <li>\u00bfQu\u00e9 mejoras a\u00f1adir\u00edas a esta demo para hacerla m\u00e1s \u00fatil al usuario final?</li> </ol> <p>```</p>"},{"location":"3-xml/3-1-xml-leccion/","title":"3.1. Consumo de datos en formato XML (Datos Abiertos JCyL)","text":"<p>Adem\u00e1s de CSV, muchos conjuntos del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n se publican en XML (eXtensible Markup Language). Este formato es muy com\u00fan en administraciones p\u00fablicas porque durante a\u00f1os ha sido un est\u00e1ndar para el intercambio de informaci\u00f3n estructurada.</p> <p>En esta lecci\u00f3n veremos qu\u00e9 es un XML, cu\u00e1les son sus caracter\u00edsticas, qu\u00e9 ventajas tiene y tambi\u00e9n sus limitaciones. Despu\u00e9s, en los siguientes apartados, aprenderemos a procesarlo con JavaScript puro y con librer\u00edas externas.</p>"},{"location":"3-xml/3-1-xml-leccion/#que-es-un-xml","title":"\ud83d\udccc \u00bfQu\u00e9 es un XML?","text":"<p>XML es un lenguaje de marcado similar a HTML, pero dise\u00f1ado para representar y transportar datos. Cada elemento se estructura con etiquetas de apertura y cierre, que pueden contener a su vez otros elementos o atributos.</p> <p>Ejemplo simplificado (basado en un dataset de monumentos):</p> <pre><code>&lt;monumento&gt;\n  &lt;nombre&gt;Catedral de Le\u00f3n&lt;/nombre&gt;\n  &lt;localidad&gt;Le\u00f3n&lt;/localidad&gt;\n  &lt;categoria&gt;Catedral&lt;/categoria&gt;\n&lt;/monumento&gt;\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>&lt;monumento&gt;</code> es el elemento principal.</li> <li>Dentro aparecen subelementos: <code>&lt;nombre&gt;</code>, <code>&lt;localidad&gt;</code>, <code>&lt;categoria&gt;</code>.</li> <li>El contenido de cada etiqueta son los datos reales.</li> </ul>"},{"location":"3-xml/3-1-xml-leccion/#por-que-se-utiliza-tanto-en-datos-abiertos","title":"\ud83d\udccc \u00bfPor qu\u00e9 se utiliza tanto en datos abiertos?","text":"<p>Aunque en la actualidad JSON es m\u00e1s popular en entornos web, el XML se sigue utilizando en muchos portales institucionales porque:</p> <ol> <li>Est\u00e1ndar internacional: fue uno de los primeros formatos oficiales de intercambio de informaci\u00f3n.</li> <li>Flexibilidad: permite representar datos jer\u00e1rquicos complejos.</li> <li>Legibilidad: es texto plano y se puede abrir en cualquier editor.</li> <li>Compatibilidad hist\u00f3rica: muchas aplicaciones y sistemas antiguos todav\u00eda dependen de XML.</li> <li>Soporte oficial: est\u00e1ndares como RSS, Atom, SOAP, etc. se basan en XML.</li> </ol> <p>En los datos abiertos de Castilla y Le\u00f3n encontrar\u00e1s XML en conjuntos como la agenda cultural o los monumentos.</p>"},{"location":"3-xml/3-1-xml-leccion/#particularidades-de-los-xml-en-el-portal-de-cyl","title":"\ud83d\udccc Particularidades de los XML en el portal de CyL","text":"<p>Al trabajar con XML de datos abiertos, conviene tener en cuenta:</p> <ul> <li>Estructura jer\u00e1rquica: los datos se organizan en nodos y subnodos.</li> <li>Atributos: un mismo elemento puede llevar informaci\u00f3n adicional en sus atributos:</li> </ul> <p><pre><code>&lt;evento id=\"1234\" categoria=\"m\u00fasica\"&gt;Concierto&lt;/evento&gt;\n</code></pre> * Espacios de nombres (namespaces): a veces aparecen prefijos como <code>&lt;dc:title&gt;</code>; indican el est\u00e1ndar de metadatos usado. * Codificaci\u00f3n: suelen estar en UTF-8, pero es importante comprobarlo en la cabecera:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n</code></pre> * Tama\u00f1o: algunos XML pueden ser muy extensos; procesarlos en el navegador puede requerir t\u00e9cnicas de filtrado. * Formato m\u00e1s \u201cverbo\u201d que JSON**: los datos ocupan m\u00e1s espacio debido a las etiquetas.</p>"},{"location":"3-xml/3-1-xml-leccion/#ventajas-de-usar-xml","title":"\ud83d\udccc Ventajas de usar XML","text":"<ul> <li>Estructura jer\u00e1rquica clara: ideal para datos que tienen subniveles o agrupaciones.</li> <li>Est\u00e1ndar maduro: existen muchas herramientas de validaci\u00f3n y transformaci\u00f3n (ej. XSLT).</li> <li>Interoperabilidad: todav\u00eda se usa en m\u00faltiples \u00e1mbitos (bibliotecas, archivos, cat\u00e1logos culturales).</li> <li>Legible por humanos: aunque m\u00e1s pesado que JSON, sigue siendo texto entendible.</li> <li>Metadatos ricos: se pueden incluir atributos adicionales y esquemas para validar la informaci\u00f3n.</li> </ul>"},{"location":"3-xml/3-1-xml-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<ul> <li>Verboso: mucho m\u00e1s pesado que CSV o JSON para representar los mismos datos.</li> <li>Parseo en JavaScript m\u00e1s complejo: requiere convertir la cadena en un \u00e1rbol DOM y recorrerlo.</li> <li>Namespaces: pueden complicar la consulta de nodos.</li> <li>Rendimiento: con archivos muy grandes, el procesamiento puede ser lento en el navegador.</li> <li>Menos directo para la web: JSON encaja mejor de forma nativa con JavaScript.</li> </ul> <p>Consejo</p> <p>Antes de programar, abre el XML en un editor o navegador y analiza:</p> <ul> <li>Cu\u00e1l es el elemento ra\u00edz.</li> <li>C\u00f3mo se llaman los nodos principales que contienen los datos (ej. <code>&lt;evento&gt;</code>, <code>&lt;monumento&gt;</code>).</li> <li>Qu\u00e9 atributos llevan y si son importantes para tu aplicaci\u00f3n.</li> <li>Si existen espacios de nombres (namespaces) que debas tener en cuenta al consultar.</li> </ul> <p>Este an\u00e1lisis previo te ahorrar\u00e1 tiempo cuando empieces a escribir consultas con <code>querySelectorAll</code> o librer\u00edas de parseo.</p>"},{"location":"3-xml/3-1-xml-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre XML y HTML?</li> <li>\u00bfQu\u00e9 ventajas tiene XML frente a CSV?</li> <li>\u00bfQu\u00e9 problemas puede darte un XML muy grande en la web?</li> <li>\u00bfQu\u00e9 son los atributos en un elemento XML? Pon un ejemplo.</li> <li>\u00bfQu\u00e9 pasos previos har\u00edas antes de procesar un XML con JavaScript?</li> </ol>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/","title":"3.2. Ejemplo con JavaScript puro (vanilla) \u2013 XML","text":"<p>En este ejemplo aprender\u00e1s a leer y procesar un XML usando solo JavaScript (sin librer\u00edas). Trabajaremos con el dataset real <code>eventos.xml</code> (agenda cultural) y mostraremos c\u00f3mo convertir sus nodos en objetos JavaScript para poder listarlos o construir tarjetas.</p>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Obtener el archivo con <code>fetch</code>.  </li> <li>Convertir la respuesta a texto (<code>.text()</code>).  </li> <li>Parsear el texto a DOM con <code>DOMParser</code>.  </li> <li>Seleccionar nodos con <code>querySelectorAll</code>.  </li> <li>Mapear cada nodo a un objeto (extrayendo subelementos y atributos).  </li> <li>Normalizar campos como fechas o coordenadas.  </li> <li>Renderizar en tarjetas accesibles.  </li> </ol>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#1-cargar-y-parsear-el-xml","title":"1) Cargar y parsear el XML","text":"<pre><code>async function cargarXML(url) {\n  const res = await fetch(url);\n  const xmlText = await res.text();\n\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlText, \"application/xml\");\n\n  const parseError = xmlDoc.querySelector(\"parsererror\");\n  if (parseError) {\n    throw new Error(\"Error al parsear el XML: \" + parseError.textContent);\n  }\n\n  return xmlDoc;\n}\n\n// Uso\ncargarXML(\"datasets/xml/eventos.xml\").then(xmlDoc =&gt; {\n  console.log(\"Documento XML:\", xmlDoc);\n});\n</code></pre>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#2-seleccionar-nodos-de-evento-y-convertirlos-a-objetos","title":"2) Seleccionar nodos de evento y convertirlos a objetos","text":"<pre><code>function leerEventos(xmlDoc) {\n  const nodosEvento = xmlDoc.querySelectorAll(\"element\");\n\n  return Array.from(nodosEvento).map(nodo =&gt; {\n    const get = (sel) =&gt; nodo.querySelector(sel)?.textContent?.trim() ?? \"\";\n\n    return {\n      titulo: get(\"Titulo_es\"),\n      inicio: get(\"FechaInicio\"),\n      fin: get(\"FechaFin\"),\n      descripcion: get(\"Descripcion_es\"),\n      lugar: get(\"LugarCelebracion\"),\n      municipio: get(\"Municipio\"),\n      provincia: get(\"Provincia\"),\n      coords: get(\"LugarCelebracionDirectorio_Posicion\"),\n      imagen: get(\"ImagenEvento\")\n    };\n  });\n}\n</code></pre>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#3-normalizar-campos-fechas-y-coordenadas","title":"3) Normalizar campos (fechas y coordenadas)","text":"<pre><code>const toDate = (s) =&gt; {\n  const d = new Date(s?.trim());\n  return isNaN(d) ? null : d;\n};\n\nconst parseCoords = (s) =&gt; {\n  if (!s) return null;\n  const [lat, lon, alt] = s.split(\"#\").map(Number);\n  return Number.isFinite(lat) &amp;&amp; Number.isFinite(lon)\n    ? { lat, lon, alt: Number.isFinite(alt) ? alt : null }\n    : null;\n};\n\nfunction normalizarEventos(eventos) {\n  return eventos.map(ev =&gt; ({\n    ...ev,\n    inicioDate: toDate(ev.inicio),\n    finDate: toDate(ev.fin),\n    geo: parseCoords(ev.coords)\n  }));\n}\n</code></pre>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#4-renderizar-en-tarjetas-accesibles","title":"4) Renderizar en tarjetas accesibles","text":"<p>HTML m\u00ednimo:</p> <pre><code>&lt;section id=\"lista\" aria-live=\"polite\"&gt;&lt;/section&gt;\n</code></pre> <p>JS:</p> <pre><code>function renderEventos(eventos, contenedor) {\n  contenedor.innerHTML = \"\";\n  const fragment = document.createDocumentFragment();\n\n  eventos.forEach(ev =&gt; {\n    const art = document.createElement(\"article\");\n    art.className = \"card\";\n    art.innerHTML = `\n      &lt;h2&gt;${ev.titulo || \"Evento sin t\u00edtulo\"}&lt;/h2&gt;\n      &lt;p&gt;&lt;strong&gt;Inicio:&lt;/strong&gt; ${ev.inicio || \"\u2014\"} \u00b7 &lt;strong&gt;Fin:&lt;/strong&gt; ${ev.fin || \"\u2014\"}&lt;/p&gt;\n      ${ev.lugar ? `&lt;p&gt;&lt;strong&gt;Lugar:&lt;/strong&gt; ${ev.lugar} (${ev.municipio || \"\"}${ev.provincia ? \", \" + ev.provincia : \"\"})&lt;/p&gt;` : \"\"}\n      ${ev.imagen ? `&lt;img src=\"${ev.imagen}\" alt=\"${ev.titulo ? `Imagen del evento \u201c${ev.titulo}\u201d` : \"Imagen del evento\"}\"&gt;` : \"\"}\n    `;\n    fragment.appendChild(art);\n  });\n\n  contenedor.appendChild(fragment);\n}\n</code></pre>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const xmlDoc = await cargarXML(\"datasets/xml/eventos.xml\");\n  const eventos = leerEventos(xmlDoc);\n  const normalizados = normalizarEventos(eventos);\n\n  normalizados.sort((a, b) =&gt; (a.inicioDate || 0) - (b.inicioDate || 0));\n\n  renderEventos(normalizados.slice(0, 10), document.getElementById(\"lista\"));\n})();\n</code></pre>"},{"location":"3-xml/3-2-xml-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 devuelve <code>DOMParser.parseFromString</code> y por qu\u00e9 es \u00fatil?</li> <li>\u00bfC\u00f3mo seleccionamos todos los nodos de evento en el XML?</li> <li>\u00bfQu\u00e9 ventaja tiene usar <code>?.textContent ?? \"\"</code> al leer campos del XML?</li> <li>\u00bfC\u00f3mo transformar\u00edas <code>lat#lon#alt</code> en un objeto <code>{ lat, lon, alt }</code>?</li> <li>\u00bfPor qu\u00e9 es recomendable normalizar las fechas antes de ordenarlas o filtrarlas?</li> </ol>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/","title":"3.3. Ejemplo con librer\u00eda (fast-xml-parser + Tabulator)","text":"<p>En este apartado vamos a ver c\u00f3mo procesar un XML utilizando librer\u00edas externas para simplificar el parseo (XML \u2192 JSON) y la visualizaci\u00f3n (tabla interactiva). Trabajaremos con el dataset de agenda cultural (<code>eventos.xml</code>) del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n.</p>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#como-incluir-las-librerias","title":"\ud83d\udce6 C\u00f3mo incluir las librer\u00edas","text":"<p>En este curso usaremos CDN (no hace falta <code>npm</code>). Inserta los scripts/estilos en tu HTML antes de tu c\u00f3digo:</p> <pre><code>&lt;!-- fast-xml-parser: convierte XML \u2192 JSON --&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/fast-xml-parser@4.4.0/dist/fast-xml-parser.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Tabulator: tabla interactiva --&gt;\n&lt;link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/tabulator-tables@6.2.5/dist/css/tabulator.min.css\"&gt;\n&lt;script src=\"https://unpkg.com/tabulator-tables@6.2.5/dist/js/tabulator.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Tu script --&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Consejo</p> <p>Si m\u00e1s adelante empaquetas con Vite/Webpack, podr\u00e1s: <pre><code>import { XMLParser } from \"fast-xml-parser\";\nimport Tabulator from \"tabulator-tables\";\n</code></pre></p>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#flujo-de-trabajo-con-libreria","title":"\ud83d\udccc Flujo de trabajo con librer\u00eda","text":"<ol> <li>Incluir <code>fast-xml-parser</code> y Tabulator desde CDN.</li> <li>Descargar el XML con <code>fetch(url).then(res =&gt; res.text())</code>.</li> <li>Parsear el XML con <code>XMLParser</code> \u2192 obtendr\u00e1s un objeto JS.</li> <li>Localizar la lista de elementos (p. ej. <code>json.root.element</code> o similar).</li> <li>Mapear a un modelo de columnas \u00fatil para la interfaz.</li> <li>Renderizar una tabla interactiva con Tabulator (columnas, paginaci\u00f3n, ordenaci\u00f3n).</li> <li>Gestionar errores de red/parseo y mostrar un estado accesible.</li> </ol>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"3-xml/3-3-xml-ejemplo-libreria/#1-cargar-y-convertir-el-xml-a-json-con-fast-xml-parser","title":"1) Cargar y convertir el XML a JSON con fast-xml-parser","text":"<pre><code>// Ruta del XML (ajusta a tu estructura)\nconst URL_XML = \"datasets/xml/eventos.xml\";\n\nasync function cargarXMLcomoJSON() {\n  // 1) Descargar XML como texto\n  const res = await fetch(URL_XML, { cache: \"no-cache\" });\n  if (!res.ok) throw new Error(`HTTP ${res.status}`);\n  const xmlText = await res.text();\n\n  // 2) Configurar el parser\n  const options = {\n    ignoreAttributes: false,   // conserva atributos\n    attributeNamePrefix: \"\",   // nombres de atributo sin prefijo\n    parseAttributeValue: true, // convierte \"123\" a n\u00famero si procede\n    // Fuerza arrays para nodos donde esperas lista (opcional):\n    isArray: (name, jpath) =&gt; [\"element\", \"evento\", \"monumento\"].includes(name)\n  };\n\n  // 3) Parsear XML \u2192 JSON\n  const parser = new fxp.XMLParser(options);\n  const json = parser.parse(xmlText);\n  return json;\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#2-detectar-la-forma-del-dataset-y-quedarnos-con-la-lista","title":"2) Detectar la forma del dataset y quedarnos con la lista","text":"<p>El nodo que agrupa cada evento puede llamarse distinto seg\u00fan el XML (por ejemplo, <code>element</code>, <code>evento</code>, etc.). Ajusta este helper a tu fichero real:</p> <pre><code>function obtenerListaEventos(json) {\n  // Explora con console.log(json) para confirmar la ruta\n  const root = json.root ?? json.Eventos ?? json.eventos ?? json;\n  const lista = root.element ?? root.evento ?? root.Evento ?? [];\n  return Array.isArray(lista) ? lista : [lista]; // normaliza a array\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#3-mapear-a-un-modelo-de-columnas-util","title":"3) Mapear a un modelo de columnas \u00fatil","text":"<p>Escogemos las claves que queremos mostrar (ajusta a tus nombres reales de etiqueta):</p> <pre><code>function aFilasTabla(eventos) {\n  return eventos.map(e =&gt; ({\n    Titulo_es: e.Titulo_es ?? e.titulo ?? \"\",\n    FechaInicio: e.FechaInicio ?? e.inicio ?? \"\",\n    FechaFin: e.FechaFin ?? e.fin ?? \"\",\n    LugarCelebracion: e.LugarCelebracion ?? e.lugar ?? \"\",\n    Municipio: e.Municipio ?? \"\",\n    Provincia: e.Provincia ?? \"\"\n  }));\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#4-generar-columnas-automaticamente-para-tabulator","title":"4) Generar columnas autom\u00e1ticamente para Tabulator","text":"<pre><code>function columnasDesdeDatos(data) {\n  const ejemplo = data[0] ?? {};\n  return Object.keys(ejemplo).map(k =&gt; ({\n    title: k,\n    field: k,\n    sorter: \"string\",\n    headerHozAlign: \"left\",\n    hozAlign: \"left\"\n  }));\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#5-pintar-la-tabla-con-tabulator","title":"5) Pintar la tabla con Tabulator","text":"<pre><code>function renderTabla(selector, data) {\n  const columns = columnasDesdeDatos(data);\n\n  return new Tabulator(selector, {\n    data,\n    columns,\n    layout: \"fitDataStretch\",\n    pagination: true,\n    paginationSize: 10,\n    paginationSizeSelector: [10, 25, 50, 100],\n    placeholder: \"No hay datos que mostrar\",\n    progressiveRender: true,\n    progressiveRenderSize: 200,\n    columnDefaults: { headerHozAlign: \"left\", hozAlign: \"left\" }\n  });\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#6-busqueda-global-opcional","title":"6) B\u00fasqueda global (opcional)","text":"<pre><code>function activarBusquedaGlobal(input, table) {\n  input.addEventListener(\"input\", () =&gt; {\n    const term = input.value.trim().toLowerCase();\n    if (!term) return table.clearFilter(true);\n\n    table.setFilter((row) =&gt; {\n      const obj = row.getData();\n      return Object.values(obj).some(v =&gt;\n        String(v ?? \"\").toLowerCase().includes(term));\n    });\n  });\n}\n</code></pre>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#7-ponerlo-todo-junto","title":"7) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  try {\n    const json = await cargarXMLcomoJSON();\n    const eventos = obtenerListaEventos(json);\n    const filas = aFilasTabla(eventos);\n\n    const tabla = renderTabla(\"#tabla\", filas);\n\n    // Si tienes un &lt;input id=\"q\"&gt; en tu HTML:\n    const q = document.getElementById(\"q\");\n    if (q) activarBusquedaGlobal(q, tabla);\n\n  } catch (err) {\n    console.error(\"Error al cargar/mostrar XML:\", err);\n    const status = document.getElementById(\"status\");\n    if (status) status.textContent = \"\u274c Error al cargar el XML. Comprueba la ruta y usa un servidor local.\";\n  }\n})();\n</code></pre> <p>Consejo</p> <p>Explora siempre el JSON que devuelve el parser con <code>console.log(json)</code>. En XML reales es habitual encontrar namespaces y nodos opcionales. Con <code>ignoreAttributes: false</code> conservar\u00e1s atributos \u00fatiles, y con <code>isArray</code> puedes forzar arrays para listas aunque solo haya un elemento.</p>"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla (DOMParser + <code>querySelectorAll</code>) Con librer\u00edas (fast-xml-parser + Tabulator) Parseo de XML Manual (DOM, nodos, textos, atributos) Autom\u00e1tico XML \u2192 JSON con opciones (<code>ignoreAttributes</code>, <code>isArray</code>, etc.) Namespaces Hay que manejarlos en selectores Serializa claves con prefijo; puedes normalizarlas despu\u00e9s Estructuras y listas Recorres nodos y construyes tus objetos Obtienes objetos/arrays listos para usar Tabla y UI Manual (crear <code>&lt;table&gt;</code>, filtros, paginaci\u00f3n) Tabulator ofrece paginaci\u00f3n, ordenaci\u00f3n, filtros Robustez ante formatos reales Depende de tu l\u00f3gica de recorrido Parser probado, reporta inconsistencias y soporta m\u00faltiples opciones Dependencias Ninguna 2 dependencias (ligeras) Curva de aprendizaje Muy baja (si conoces DOM) Muy baja (configurar parser y columnas)"},{"location":"3-xml/3-3-xml-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 ventajas aporta convertir el XML a JSON antes de trabajar con \u00e9l?</li> <li>\u00bfPara qu\u00e9 sirven <code>ignoreAttributes</code> y <code>isArray</code> en <code>fast-xml-parser</code>?</li> <li>\u00bfQu\u00e9 pasos das para localizar la lista de eventos dentro del JSON resultante?</li> <li>\u00bfQu\u00e9 ventajas ofrece Tabulator frente a construir la tabla a mano?</li> <li>\u00bfC\u00f3mo implementar\u00edas una b\u00fasqueda global sobre todas las columnas?</li> </ol>"},{"location":"3-xml/3-4-xml-demo/","title":"3.4. Demo: Agenda cultural (XML)","text":"<p>Ya hemos visto c\u00f3mo procesar un XML con JavaScript puro y c\u00f3mo simplificar la tarea usando una librer\u00eda externa como <code>fast-xml-parser</code>. Es momento de ver el resultado final funcionando en p\u00e1ginas reales.</p> <p>En estas demos utilizamos el dataset de agenda cultural del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n (<code>eventos.xml</code>). El sistema carga el archivo XML, lo convierte a una estructura manejable y muestra los eventos en tarjetas/tabla accesible con ordenaci\u00f3n y b\u00fasqueda.</p>"},{"location":"3-xml/3-4-xml-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<ul> <li>Carga real del dataset <code>eventos.xml</code>.  </li> <li>Dos enfoques:</li> <li>Vanilla (DOMParser): convierte el XML en DOM y recorre nodos con <code>querySelectorAll</code>.</li> <li>Librer\u00eda (<code>fast-xml-parser</code>): transforma XML \u2192 JSON para operar con objetos JS.</li> <li>Controles de b\u00fasqueda y ordenaci\u00f3n por fecha (seg\u00fan la demo).  </li> <li>Manejo de errores de red y mensajes accesibles para el usuario.</li> </ul> <p>Consejo</p> <p>Recuerda abrir el proyecto con un servidor local (por ejemplo, la extensi\u00f3n Live Server en VS Code, o <code>mkdocs serve</code>). Si intentas abrirlo directamente con <code>file://</code>, el navegador puede bloquear la carga del XML por motivos de seguridad.</p>"},{"location":"3-xml/3-4-xml-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"3-xml/3-4-xml-demo/#demo-con-libreria-fast-xml-parser","title":"\u25b6\ufe0f Demo con librer\u00eda (<code>fast-xml-parser</code>)","text":"<p>Abrir demo en vivo{ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"3-xml/3-4-xml-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"3-xml/3-4-xml-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia clave hay entre el enfoque vanilla (DOMParser) y la demo con librer\u00eda (XML \u2192 JSON)?  </li> <li>\u00bfQu\u00e9 pasos realiza el c\u00f3digo antes de renderizar los eventos en pantalla?  </li> <li>\u00bfQu\u00e9 har\u00edas si el XML incluyera namespaces (p. ej., <code>dc:title</code>)?  </li> <li>\u00bfC\u00f3mo manejar\u00edas eventos sin fecha de inicio o con una fecha mal formateada?  </li> <li>\u00bfQu\u00e9 ventajas e inconvenientes observas al convertir XML a JSON para su consumo en la web?</li> </ol>"},{"location":"4-json/4-1-json-leccion/","title":"4.1. Consumo de datos en formato JSON (Datos Abiertos JCyL)","text":"<p>Adem\u00e1s de CSV y XML, muchos conjuntos del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n se publican en JSON (JavaScript Object Notation). Este formato se ha convertido en el est\u00e1ndar actual en aplicaciones web, ya que est\u00e1 pensado para representar datos estructurados de forma sencilla y es totalmente compatible con JavaScript.</p> <p>En esta lecci\u00f3n veremos qu\u00e9 es un JSON, cu\u00e1les son sus caracter\u00edsticas, qu\u00e9 ventajas ofrece y tambi\u00e9n sus limitaciones. Despu\u00e9s, en los siguientes apartados, aprenderemos a procesarlo con JavaScript puro y con librer\u00edas externas como Axios.</p>"},{"location":"4-json/4-1-json-leccion/#que-es-un-json","title":"\ud83d\udccc \u00bfQu\u00e9 es un JSON?","text":"<p>JSON es un formato basado en texto que representa datos como objetos y arrays de JavaScript. Se compone de pares <code>clave: valor</code>, organizados con llaves <code>{}</code> y corchetes <code>[]</code>.</p> <p>Ejemplo simplificado (basado en un dataset de instituciones bibliotecarias):</p> <pre><code>{\n  \"institucion\": {\n    \"nombre\": \"Biblioteca P\u00fablica de Burgos\",\n    \"provincia\": \"Burgos\",\n    \"servicios\": [\"Pr\u00e9stamo\", \"Sala de lectura\", \"Acceso a Internet\"]\n  }\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>institucion</code> es un objeto con tres claves.</li> <li><code>nombre</code> y <code>provincia</code> son cadenas de texto.</li> <li><code>servicios</code> es un array de valores.</li> </ul>"},{"location":"4-json/4-1-json-leccion/#por-que-se-utiliza-tanto-en-datos-abiertos","title":"\ud83d\udccc \u00bfPor qu\u00e9 se utiliza tanto en datos abiertos?","text":"<p>JSON se ha popularizado en los portales de datos y en APIs por varias razones:</p> <ol> <li>Compatibilidad nativa con JavaScript: no necesita transformaciones para usarlo en el navegador.</li> <li>Estructura clara: permite representar tanto listas simples como datos jer\u00e1rquicos.</li> <li>Ligereza: ocupa menos que XML, sin etiquetas repetitivas.</li> <li>Legibilidad: es texto plano y se entiende f\u00e1cilmente a simple vista.</li> <li>Interoperabilidad: casi todos los lenguajes modernos incluyen soporte para JSON.</li> </ol> <p>En los datos abiertos de Castilla y Le\u00f3n encontrar\u00e1s JSON en conjuntos como el registro de instituciones bibliotecarias o los monumentos.</p>"},{"location":"4-json/4-1-json-leccion/#particularidades-de-los-json-en-el-portal-de-cyl","title":"\ud83d\udccc Particularidades de los JSON en el portal de CyL","text":"<p>Al trabajar con JSON del portal, conviene fijarse en:</p> <ul> <li>Objeto ra\u00edz: a veces todo el dataset est\u00e1 dentro de un \u00fanico objeto, otras veces es un array.</li> <li>Listas anidadas: por ejemplo, un monumento puede incluir varias direcciones o servicios.</li> <li>Valores nulos o vac\u00edos: algunas claves pueden no tener informaci\u00f3n (<code>null</code> o <code>\"\"</code>).</li> <li>Codificaci\u00f3n: los archivos suelen estar en UTF-8, lo que garantiza la compatibilidad con acentos y \u00f1.</li> <li>Consistencia de claves: conviene comprobar si todas las entradas tienen las mismas claves (no siempre es as\u00ed).</li> </ul> <p>Ejemplo real simplificado del dataset de monumentos:</p> <pre><code>{\n  \"monumentos\": [\n    { \"nombre\": \"Muralla de \u00c1vila\", \"provincia\": \"\u00c1vila\", \"municipio\": \"\u00c1vila\" },\n    { \"nombre\": \"Catedral de Burgos\", \"provincia\": \"Burgos\", \"municipio\": \"Burgos\" }\n  ]\n}\n</code></pre>"},{"location":"4-json/4-1-json-leccion/#ventajas-de-usar-json","title":"\ud83d\udccc Ventajas de usar JSON","text":"<ul> <li>Nativo en JavaScript: se convierte f\u00e1cilmente con <code>JSON.parse()</code>.</li> <li>Estructuras jer\u00e1rquicas: admite arrays dentro de objetos y viceversa.</li> <li>M\u00e1s ligero que XML: ocupa menos espacio en la red.</li> <li>Formato abierto y est\u00e1ndar: soportado en casi todos los lenguajes.</li> <li>Lectura sencilla: f\u00e1cil de inspeccionar para humanos.</li> </ul>"},{"location":"4-json/4-1-json-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<ul> <li>Menos adecuado para documentos muy extensos: XML puede ser m\u00e1s claro en datos con mucho texto y metadatos.</li> <li>No incluye comentarios: no se puede documentar dentro del propio JSON.</li> <li>Estructura r\u00edgida: si faltan o cambian claves, el c\u00f3digo puede fallar.</li> <li>Tama\u00f1o: aunque m\u00e1s ligero que XML, puede crecer mucho con datasets masivos.</li> <li>Validaci\u00f3n externa: no tiene un esquema obligatorio (aunque existen est\u00e1ndares como JSON Schema).</li> </ul> <p>Consejo</p> <p>Antes de trabajar con un JSON: - Abre el archivo en un editor para confirmar si el ra\u00edz es un objeto o un array. - Verifica que todas las entradas tienen las claves importantes (ej. <code>nombre</code>, <code>provincia</code>). - Comprueba si aparecen valores vac\u00edos o <code>null</code> y decide c\u00f3mo tratarlos. - Si es muy grande, filtra antes de mostrar todo en la web.  </p>"},{"location":"4-json/4-1-json-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia principal hay entre un JSON y un XML?</li> <li>\u00bfQu\u00e9 ventajas tiene JSON frente a CSV?</li> <li>\u00bfQu\u00e9 problemas puedes encontrar si un JSON no tiene siempre las mismas claves en todos sus objetos?</li> <li>\u00bfPor qu\u00e9 es \u00fatil que JSON sea el formato nativo de JavaScript?</li> <li>\u00bfQu\u00e9 pasos previos har\u00edas antes de procesar un JSON en tu aplicaci\u00f3n web?</li> </ol>"},{"location":"4-json/4-2-json-ejemplo-vanilla/","title":"4.2. Ejemplo con JavaScript puro (vanilla)","text":"<p>En este apartado vamos a ver c\u00f3mo procesar un JSON utilizando solo JavaScript puro, sin librer\u00edas externas. Trabajaremos con el dataset de instituciones bibliotecarias de Castilla y Le\u00f3n, publicado en formato JSON.</p>"},{"location":"4-json/4-2-json-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Cargar el archivo con <code>fetch</code>.  </li> <li>Obtener el contenido como objeto usando <code>.json()</code>.  </li> <li>Explorar la estructura para identificar las claves principales.  </li> <li>Mapear los datos a objetos JavaScript manejables.  </li> <li>Renderizar los datos en una tabla HTML sencilla.  </li> </ol>"},{"location":"4-json/4-2-json-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"4-json/4-2-json-ejemplo-vanilla/#1-cargar-el-json-y-convertirlo-en-objeto","title":"1) Cargar el JSON y convertirlo en objeto","text":"<pre><code>async function cargarJSON() {\n  const respuesta = await fetch(\"datasets/json/registro-instituciones-bibliotecarias-de-castilla-y-leon.json\");\n  const datos = await respuesta.json();\n  console.log(datos);\n  return datos;\n}\n````\n\nEsto nos muestra todo el contenido del JSON como objeto JavaScript.\n\n---\n\n### 2) Acceder a la lista de instituciones\n\nSupongamos que el dataset incluye una lista bajo la clave `instituciones`:\n\n```js\nlet instituciones = datos.instituciones;\n\ninstituciones.forEach(inst =&gt; {\n  console.log(inst.nombre, inst.provincia);\n});\n</code></pre> <p>Esto imprimir\u00eda en la consola el nombre y la provincia de cada instituci\u00f3n.</p>"},{"location":"4-json/4-2-json-ejemplo-vanilla/#3-crear-una-tabla-html-con-los-datos","title":"3) Crear una tabla HTML con los datos","text":"<pre><code>function renderTabla(datos, columnas) {\n  const tabla = document.createElement(\"table\");\n\n  // cabecera\n  const thead = document.createElement(\"thead\");\n  const tr = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    const th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    tr.appendChild(th);\n  });\n  thead.appendChild(tr);\n  tabla.appendChild(thead);\n\n  // filas\n  const tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    const tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      const td = document.createElement(\"td\");\n      td.textContent = fila[col] ?? \"\";\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  document.body.appendChild(tabla);\n}\n</code></pre>"},{"location":"4-json/4-2-json-ejemplo-vanilla/#4-ponerlo-todo-junto","title":"4) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const datos = await cargarJSON();\n  const instituciones = datos.instituciones;\n  renderTabla(instituciones, [\"nombre\", \"provincia\", \"municipio\"]);\n})();\n</code></pre> <p>Consejo</p> <p>Este enfoque es ideal para empezar a trabajar con JSON en la web. Ten en cuenta que la estructura del JSON puede variar de un dataset a otro:</p> <ul> <li>A veces el objeto ra\u00edz contiene la lista bajo una clave (<code>instituciones</code>, <code>monumentos</code>).  </li> <li>Otras veces, directamente es un array.  </li> </ul> <p>Revisa siempre con <code>console.log</code> antes de procesar.</p>"},{"location":"4-json/4-2-json-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 m\u00e9todo usamos para convertir la respuesta en objeto JavaScript?</li> <li>\u00bfQu\u00e9 diferencia hay entre usar <code>.text()</code> y <code>.json()</code> en <code>fetch</code>?</li> <li>\u00bfC\u00f3mo recorremos el array de instituciones en el ejemplo?</li> <li>\u00bfPor qu\u00e9 a\u00f1adimos <code>?? \"\"</code> al mostrar los valores en la tabla?</li> <li>\u00bfQu\u00e9 pasos previos har\u00edas para comprobar la estructura de un JSON nuevo antes de procesarlo?</li> </ol>"},{"location":"4-json/4-3-json-ejemplo-libreria/","title":"4.3. Ejemplo con librer\u00eda (Axios)","text":"<p>En este apartado vamos a ver c\u00f3mo procesar un JSON utilizando una librer\u00eda externa, en concreto Axios, para simplificar la carga y el manejo de errores. Trabajaremos con el dataset de instituciones bibliotecarias de Castilla y Le\u00f3n en formato JSON.</p>"},{"location":"4-json/4-3-json-ejemplo-libreria/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>En este curso usaremos CDN (no hace falta <code>npm</code>). Inserta el script en tu HTML antes de tu c\u00f3digo:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/axios@1.7.7/dist/axios.min.js\" integrity=\"\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Si m\u00e1s adelante empaquetas con Vite/Webpack, podr\u00e1s <code>import axios from \"axios\"</code> sin cambiar el resto del c\u00f3digo.</p>"},{"location":"4-json/4-3-json-ejemplo-libreria/#flujo-de-trabajo-con-libreria","title":"\ud83d\udccc Flujo de trabajo con librer\u00eda","text":"<ol> <li>Incluir Axios desde CDN.</li> <li>Hacer la solicitud con <code>axios.get(url)</code>.</li> <li>Recibir los datos desde <code>response.data</code> (ya parseados).</li> <li>Comprobar la estructura (array u objeto).</li> <li>Mapear a un modelo de columnas \u00fatil para la interfaz.</li> <li>Renderizar la informaci\u00f3n en una tabla simple.</li> <li>Gestionar errores (red, timeout) y, si hace falta, cancelar la petici\u00f3n.</li> </ol>"},{"location":"4-json/4-3-json-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"4-json/4-3-json-ejemplo-libreria/#1-cargar-el-json-con-axios","title":"1) Cargar el JSON con Axios","text":"<pre><code>// datasets/json/registro-de-instituciones-bibliotecarias-de-castilla-y-leon.json\nconst URL_JSON = \"datasets/json/registro-de-instituciones-bibliotecarias-de-castilla-y-leon.json\";\n\nasync function cargarJSON() {\n  try {\n    const { data } = await axios.get(URL_JSON, {\n      headers: { Accept: \"application/json\" },\n      timeout: 8000 // ms\n    });\n    return data;\n  } catch (err) {\n    // Manejo de errores t\u00edpico con Axios\n    if (axios.isAxiosError(err)) {\n      console.error(\"Axios error:\", err.message, \"status:\", err.response?.status);\n    } else {\n      console.error(\"Error desconocido:\", err);\n    }\n    throw err;\n  }\n}\n</code></pre>"},{"location":"4-json/4-3-json-ejemplo-libreria/#2-detectar-la-forma-del-dataset-y-quedarnos-con-la-lista","title":"2) Detectar la forma del dataset y quedarnos con la lista","text":"<p>El fichero real de bibliotecas es un array de objetos. Por eso comprobamos si <code>data</code> ya es un array; si no, intentamos localizar la clave lista (por ejemplo, <code>instituciones</code> en otros JSON).</p> <pre><code>function obtenerListaInstituciones(data) {\n  if (Array.isArray(data)) return data;\n  // fallback gen\u00e9rico si viniera envuelto en un objeto\n  return data?.instituciones ?? [];\n}\n</code></pre>"},{"location":"4-json/4-3-json-ejemplo-libreria/#3-mapear-a-un-modelo-de-columnas-util","title":"3) Mapear a un modelo de columnas \u00fatil","text":"<p>Seleccionamos las claves que queramos mostrar en la tabla (t\u00fa puedes cambiar/a\u00f1adir):</p> <pre><code>function aFilasTabla(instituciones) {\n  return instituciones.map(i =&gt; ({\n    nombreentidad: i.nombreentidad ?? \"\",\n    localidad: i.localidad ?? \"\",\n    tipo_de_gestion: i.tipo_de_gestion ?? \"\",\n    codigo: i.codigo ?? \"\",\n    enlace_al_contenido: i.enlace_al_contenido ?? \"\"\n  }));\n}\n</code></pre>"},{"location":"4-json/4-3-json-ejemplo-libreria/#4-renderizar-una-tabla-html-sencilla","title":"4) Renderizar una tabla HTML sencilla","text":"<pre><code>function renderTabla(datos, columnas, destino = document.body) {\n  const tabla = document.createElement(\"table\");\n\n  // cabecera\n  const thead = document.createElement(\"thead\");\n  const trH = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    const th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    trH.appendChild(th);\n  });\n  thead.appendChild(trH);\n  tabla.appendChild(thead);\n\n  // filas\n  const tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    const tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      const td = document.createElement(\"td\");\n      td.textContent = fila[col] ?? \"\";\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  destino.appendChild(tabla);\n}\n</code></pre>"},{"location":"4-json/4-3-json-ejemplo-libreria/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const data = await cargarJSON();\n  const instituciones = obtenerListaInstituciones(data);\n  const filas = aFilasTabla(instituciones);\n  renderTabla(filas, [\"nombreentidad\", \"localidad\", \"tipo_de_gestion\", \"codigo\", \"enlace_al_contenido\"]);\n})();\n</code></pre>"},{"location":"4-json/4-3-json-ejemplo-libreria/#opcional-cancelar-una-peticion-con-abortcontroller","title":"(Opcional) Cancelar una petici\u00f3n con <code>AbortController</code>","text":"<p>Axios 1.x soporta AbortController (\u00fatil si el usuario cambia de vista):</p> <pre><code>const controller = new AbortController();\nconst peticion = axios.get(URL_JSON, { signal: controller.signal });\n\n// \u2026 si necesitas abortar:\ncontroller.abort();\n</code></pre> <p>Consejo</p> <p>En MkDocs (o cualquier servidor est\u00e1tico), usa siempre un servidor local (<code>mkdocs serve</code>, Live Server\u2026). Si abres el HTML con <code>file://</code>, el navegador puede bloquear la lectura del JSON. Revisa en DevTools \u2192 Network que la ruta relativa a <code>datasets/json/...</code> es la correcta.</p>"},{"location":"4-json/4-3-json-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla (<code>fetch</code> + <code>.json()</code>) Con librer\u00eda (Axios) Parseo Manual (<code>res.json()</code>) Autom\u00e1tico en <code>response.data</code> Errores <code>try/catch</code> + comprobar <code>res.ok</code> <code>try/catch</code> + <code>axios.isAxiosError</code>, c\u00f3digos de estado accesibles Timeouts Hay que implementar se\u00f1al/abort manual Opci\u00f3n <code>timeout</code> nativa Cancelaci\u00f3n <code>AbortController</code> con <code>fetch</code> <code>AbortController</code> soportado (<code>{ signal }</code>) Cabeceras por defecto Debes pasarlas t\u00fa (opcional) Incluye cabeceras sensatas; f\u00e1cil a\u00f1adir <code>headers</code> Interceptores / logging A mano en cada llamada Interceptores globales (<code>axios.interceptors</code>) Tama\u00f1o de c\u00f3digo repetitivo Algo m\u00e1s de \u201cpegamento\u201d por cada endpoint Menos repetici\u00f3n; configuraci\u00f3n com\u00fan y defaults Dependencias Ninguna 1 dependencia (ligera) Curva de aprendizaje Muy baja Muy baja (si sabes <code>fetch</code>, te resultar\u00e1 familiar)"},{"location":"4-json/4-3-json-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>response.json()</code> en vanilla y <code>response.data</code> en Axios?</li> <li>\u00bfC\u00f3mo comprobar\u00edas si el dataset viene como array o dentro de una clave (ej. <code>instituciones</code>)?</li> <li>\u00bfQu\u00e9 ventajas aporta <code>timeout</code> en Axios frente a fetch puro?</li> <li>\u00bfC\u00f3mo cancelar\u00edas una petici\u00f3n en curso con Axios?</li> <li>\u00bfQu\u00e9 columnas has decidido mostrar y por qu\u00e9?</li> </ol>"},{"location":"4-json/4-4-json-demo/","title":"4.4. Demo: Instituciones bibliotecarias (JSON)","text":"<p>Ya hemos visto c\u00f3mo procesar un JSON con JavaScript puro y c\u00f3mo simplificar la tarea usando una librer\u00eda externa como <code>Axios</code>. Es momento de ver el resultado final funcionando en p\u00e1ginas reales.</p> <p>En estas demos utilizamos el dataset de instituciones bibliotecarias de Castilla y Le\u00f3n (<code>registro-instituciones-bibliotecarias-de-castilla-y-leon.json</code>). El sistema carga el archivo JSON, obtiene la lista de instituciones y las muestra en una tabla accesible con columnas clave como nombre, municipio y provincia.</p>"},{"location":"4-json/4-4-json-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<ul> <li>Carga real del dataset <code>registro-instituciones-bibliotecarias-de-castilla-y-leon.json</code>.  </li> <li>Dos enfoques:</li> <li>Vanilla (<code>fetch</code> + <code>.json()</code>): carga y procesa el JSON sin dependencias externas.  </li> <li>Librer\u00eda (<code>Axios</code>): a\u00f1ade simplificaci\u00f3n en el manejo de errores, cabeceras y timeouts.  </li> <li>Renderizado de una tabla HTML accesible con los datos principales.  </li> <li>Gesti\u00f3n de errores de red y mensajes en consola o pantalla para depuraci\u00f3n.</li> </ul> <p>Consejo</p> <p>Recuerda abrir el proyecto con un servidor local (por ejemplo, la extensi\u00f3n Live Server en VS Code, o <code>mkdocs serve</code>). Si intentas abrirlo directamente con <code>file://</code>, el navegador puede bloquear la carga del JSON por motivos de seguridad.</p>"},{"location":"4-json/4-4-json-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"4-json/4-4-json-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla)){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"4-json/4-4-json-demo/#demo-con-libreria-axios","title":"\u25b6\ufe0f Demo con librer\u00eda (<code>Axios</code>)","text":"<p>Abrir demo en vivo (Axios){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"4-json/4-4-json-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia clave hay entre el enfoque vanilla (fetch) y el de librer\u00eda (Axios)?  </li> <li>\u00bfQu\u00e9 ventajas aporta Axios en cuanto a manejo de errores y timeouts?  </li> <li>\u00bfQu\u00e9 pasos realiza el c\u00f3digo antes de renderizar la tabla en pantalla?  </li> <li>\u00bfC\u00f3mo manejar\u00edas un JSON cuya estructura cambiara (por ejemplo, si la lista no estuviera bajo <code>instituciones</code>)?  </li> <li>\u00bfQu\u00e9 mejoras a\u00f1adir\u00edas a la demo para facilitar la exploraci\u00f3n de los datos (ej. filtros, paginaci\u00f3n, b\u00fasqueda)?</li> </ol>"},{"location":"5-api/5-1-api-leccion/","title":"5.1. Consumo de datos a trav\u00e9s de una API REST (Datos Abiertos JCyL)","text":"<p>Adem\u00e1s de CSV, XML o JSON est\u00e1ticos, muchos conjuntos de datos del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n est\u00e1n disponibles mediante APIs REST. Esto significa que podemos consultar la informaci\u00f3n en tiempo real, con filtros y par\u00e1metros, y recibir la respuesta en formato JSON o XML.</p> <p>En esta lecci\u00f3n veremos qu\u00e9 es una API REST, c\u00f3mo funcionan en el contexto de los datos abiertos y qu\u00e9 ventajas y limitaciones presentan. Despu\u00e9s aprenderemos a consumirlas con JavaScript puro y con librer\u00edas externas.</p>"},{"location":"5-api/5-1-api-leccion/#que-es-una-api-rest","title":"\ud83d\udccc \u00bfQu\u00e9 es una API REST?","text":"<p>Una API REST (Application Programming Interface \u2013 Representational State Transfer) es un servicio web que expone datos y operaciones a trav\u00e9s del protocolo HTTP. En lugar de descargar un archivo fijo (CSV, XML, JSON), hacemos una solicitud a una URL con ciertos par\u00e1metros, y la API nos devuelve una respuesta din\u00e1mica.</p> <p>Ejemplo gen\u00e9rico de consulta:</p> <p>```</p> <p>https://servidor.datosabiertos.jcyl.es/servicio/recurso?param1=valor1&amp;param2=valor2</p> <p>````</p>"},{"location":"5-api/5-1-api-leccion/#como-funcionan-las-apis-rest-en-los-datos-abiertos","title":"\ud83d\udccc \u00bfC\u00f3mo funcionan las APIs REST en los datos abiertos?","text":"<ul> <li>Se accede mediante una URL base publicada en el portal.  </li> <li>Se pueden a\u00f1adir par\u00e1metros en la URL (despu\u00e9s de <code>?</code>) para filtrar la informaci\u00f3n (ej. por fecha, municipio, categor\u00eda\u2026).  </li> <li>La respuesta suele ser en JSON (f\u00e1cil de usar con JavaScript) o en XML (m\u00e1s com\u00fan en servicios antiguos).  </li> <li>Se basan en m\u00e9todos HTTP:</li> <li><code>GET</code> \u2192 obtener datos.  </li> <li><code>POST</code>, <code>PUT</code>, <code>DELETE</code> \u2192 modificar (menos habitual en datos abiertos p\u00fablicos).</li> </ul>"},{"location":"5-api/5-1-api-leccion/#ejemplo-de-respuesta","title":"\ud83d\udccc Ejemplo de respuesta","text":"<p>Una petici\u00f3n correcta suele devolver un objeto en JSON con una lista de elementos. Ejemplo simplificado:</p> <p>```json {   \"correcto\": true,   \"mensaje\": \"Lista de actividades enviada correctamente\",   \"resultados\": [     {       \"nombre\": \"Curso de iniciaci\u00f3n a la inform\u00e1tica\",       \"fechaInicio\": \"2025-03-01\",       \"fechaFin\": \"2025-03-05\",       \"municipio\": \"Le\u00f3n\",       \"provincia\": \"Le\u00f3n\",       \"horas\": 20,       \"plazas\": 15     }   ] } ````</p>"},{"location":"5-api/5-1-api-leccion/#ventajas-de-usar-apis-rest","title":"\ud83d\udccc Ventajas de usar APIs REST","text":"<ul> <li>Datos en tiempo real: siempre recibimos la versi\u00f3n m\u00e1s reciente.</li> <li>Filtros y par\u00e1metros: podemos pedir solo lo que necesitamos (ej. actividades en una provincia concreta).</li> <li>Formato flexible: normalmente JSON, ideal para JavaScript.</li> <li>Escalabilidad: integrable en aplicaciones web, m\u00f3viles o dashboards din\u00e1micos.</li> </ul>"},{"location":"5-api/5-1-api-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<ul> <li>Dependencia del servidor: si la API falla, no podemos acceder a los datos.</li> <li>Necesidad de conexi\u00f3n a internet: a diferencia de un CSV descargado, no funciona offline.</li> <li>Conocimiento t\u00e9cnico: hay que entender c\u00f3mo construir las URLs y par\u00e1metros.</li> <li>Pol\u00edticas de uso: algunas APIs limitan el n\u00famero de peticiones o requieren autenticaci\u00f3n.</li> </ul> <p>Consejo</p> <p>Antes de consumir una API, revisa siempre: - La documentaci\u00f3n oficial del recurso. - Los par\u00e1metros disponibles para filtrar datos. - El formato de respuesta (JSON/XML). - Los c\u00f3digos de error que puede devolver el servidor.</p>"},{"location":"5-api/5-1-api-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre descargar un CSV y consultar una API REST?</li> <li>\u00bfQu\u00e9 par\u00e1metros se suelen a\u00f1adir a una URL para filtrar la informaci\u00f3n?</li> <li>\u00bfQu\u00e9 m\u00e9todo HTTP se usa habitualmente para obtener datos de una API abierta?</li> <li>\u00bfQu\u00e9 problemas pueden surgir si el servidor de la API no responde?</li> <li>\u00bfQu\u00e9 ventajas tiene usar una API en vez de un archivo est\u00e1tico para datos que cambian con frecuencia?</li> </ol>"},{"location":"5-api/5-2-api-ejemplo-vanilla/","title":"5.2. Ejemplo con JavaScript puro (vanilla) \u2013 API REST","text":"<p>En este ejemplo aprender\u00e1s a consultar una API REST usando solo JavaScript (sin librer\u00edas). Trabajaremos con un recurso del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n, que devuelve los datos en JSON al hacer una petici\u00f3n HTTP.</p>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Hacer la petici\u00f3n con <code>fetch</code> a la URL de la API.  </li> <li>Convertir la respuesta a objeto usando <code>.json()</code>.  </li> <li>Explorar la estructura para identificar la lista de resultados.  </li> <li>Mapear cada resultado a un objeto con las claves que interesan.  </li> <li>Renderizar la informaci\u00f3n en pantalla (ej. tabla o tarjetas).  </li> <li>Gestionar errores (respuesta no OK, red ca\u00edda\u2026).  </li> </ol>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"5-api/5-2-api-ejemplo-vanilla/#1-consultar-la-api-con-fetch","title":"1) Consultar la API con <code>fetch</code>","text":"<pre><code>async function cargarAPI(url) {\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(`Error HTTP ${res.status}`);\n  return await res.json();\n}\n\n// Uso\ncargarAPI(\"https://.../api/endpoint\").then(data =&gt; {\n  console.log(\"Respuesta de la API:\", data);\n});\n````\n\n---\n\n### 2) Explorar la estructura y quedarnos con la lista\n\nEn muchos casos, la respuesta de la API tiene una clave como `resultados`, `items` o similar.\nEjemplo:\n\n```js\nfunction obtenerLista(data) {\n  // Si ya es un array, lo devolvemos directamente\n  if (Array.isArray(data)) return data;\n\n  // Si viene dentro de un objeto, intentamos extraer la lista\n  return data?.resultados ?? [];\n}\n</code></pre>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#3-mapear-los-datos-a-columnas-utiles","title":"3) Mapear los datos a columnas \u00fatiles","text":"<pre><code>function aFilasTabla(resultados) {\n  return resultados.map(item =&gt; ({\n    nombre: item.nombre ?? \"\",\n    municipio: item.municipio ?? \"\",\n    provincia: item.provincia ?? \"\",\n    fechaInicio: item.fechaInicio ?? \"\",\n    fechaFin: item.fechaFin ?? \"\"\n  }));\n}\n</code></pre>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#4-renderizar-en-una-tabla-sencilla","title":"4) Renderizar en una tabla sencilla","text":"<pre><code>function renderTabla(datos, columnas, destino = document.body) {\n  const tabla = document.createElement(\"table\");\n\n  // Cabecera\n  const thead = document.createElement(\"thead\");\n  const trH = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    const th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    trH.appendChild(th);\n  });\n  thead.appendChild(trH);\n  tabla.appendChild(thead);\n\n  // Filas\n  const tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    const tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      const td = document.createElement(\"td\");\n      td.textContent = fila[col];\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  destino.appendChild(tabla);\n}\n</code></pre>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  try {\n    const data = await cargarAPI(\"https://.../api/endpoint\");\n    const lista = obtenerLista(data);\n    const filas = aFilasTabla(lista);\n\n    renderTabla(filas, [\"nombre\", \"municipio\", \"provincia\", \"fechaInicio\", \"fechaFin\"]);\n  } catch (err) {\n    console.error(\"Error al cargar la API:\", err);\n  }\n})();\n</code></pre> <p>Consejo</p> <p>No olvides comprobar la documentaci\u00f3n de la API para saber:</p> <ul> <li>La URL base.</li> <li>Qu\u00e9 par\u00e1metros admite (ej. filtrar por provincia o fechas).</li> <li>C\u00f3mo es la estructura exacta de la respuesta.</li> <li>Qu\u00e9 c\u00f3digos de error puede devolver.</li> </ul>"},{"location":"5-api/5-2-api-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 hace la funci\u00f3n <code>cargarAPI</code> y por qu\u00e9 usamos <code>await res.json()</code>?</li> <li>\u00bfC\u00f3mo comprobamos si la respuesta viene directamente como array o dentro de un objeto?</li> <li>\u00bfQu\u00e9 funci\u00f3n convierte cada resultado en un objeto con las claves que queremos mostrar?</li> <li>\u00bfQu\u00e9 ocurrir\u00eda si intentamos acceder a una clave que no existe en el objeto JSON?</li> <li>\u00bfPor qu\u00e9 es importante capturar errores con <code>try/catch</code> al consumir una API REST?</li> </ol>"},{"location":"5-api/5-3-api-ejemplo-libreria/","title":"5.3. Ejemplo con librer\u00eda (Axios) \u2013 API REST","text":"<p>En este apartado vamos a ver c\u00f3mo consumir una API REST utilizando una librer\u00eda externa, en concreto Axios, que simplifica mucho la carga de datos y el manejo de errores. Trabajaremos con un endpoint real del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n en formato JSON (por ejemplo, la agenda cultural expuesta como servicio REST).</p>"},{"location":"5-api/5-3-api-ejemplo-libreria/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>Usaremos CDN para no complicar el entorno. Inserta Axios en tu HTML antes de tu script:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/axios@1.7.7/dist/axios.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>M\u00e1s adelante, si empaquetas con Vite/Webpack, podr\u00e1s hacer <code>import axios from \"axios\"</code> sin cambiar nada del resto del c\u00f3digo.</p>"},{"location":"5-api/5-3-api-ejemplo-libreria/#flujo-de-trabajo-con-axios","title":"\ud83d\udccc Flujo de trabajo con Axios","text":"<ol> <li>Incluir Axios desde CDN.</li> <li>Llamar a la API con <code>axios.get(url)</code>.</li> <li>Obtener los datos desde <code>response.data</code>.</li> <li>Comprobar la estructura de la respuesta (array u objeto con claves).</li> <li>Transformar los resultados a un formato manejable.</li> <li>Renderizar la informaci\u00f3n en una tabla o tarjetas HTML.</li> <li>Manejar errores de red o de API con mensajes claros.</li> </ol>"},{"location":"5-api/5-3-api-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"5-api/5-3-api-ejemplo-libreria/#1-llamada-a-la-api-con-axios","title":"1) Llamada a la API con Axios","text":"<pre><code>const URL_API = \"https://datosabiertos.jcyl.es/api/agenda-cultural\"; \n// (ejemplo; sustituye por la ruta real de la API)\n\nasync function cargarAPI() {\n  try {\n    const { data } = await axios.get(URL_API, {\n      headers: { Accept: \"application/json\" },\n      timeout: 8000 // ms\n    });\n    return data;\n  } catch (err) {\n    if (axios.isAxiosError(err)) {\n      console.error(\"Axios error:\", err.message, \"status:\", err.response?.status);\n    } else {\n      console.error(\"Error desconocido:\", err);\n    }\n    throw err;\n  }\n}\n</code></pre>"},{"location":"5-api/5-3-api-ejemplo-libreria/#2-detectar-la-estructura-y-quedarnos-con-la-lista","title":"2) Detectar la estructura y quedarnos con la lista","text":"<p>En muchas APIs, la respuesta tiene esta forma:</p> <pre><code>{\n  \"resultados\": [\n    { \"titulo\": \"Concierto en Salamanca\", \"fecha\": \"2024-09-01\", \"lugar\": \"Plaza Mayor\" },\n    { \"titulo\": \"Exposici\u00f3n en Le\u00f3n\", \"fecha\": \"2024-09-05\", \"lugar\": \"Museo de Arte\" }\n  ]\n}\n</code></pre> <p>Podemos acceder as\u00ed:</p> <pre><code>function obtenerEventos(data) {\n  return data?.resultados ?? [];\n}\n</code></pre>"},{"location":"5-api/5-3-api-ejemplo-libreria/#3-transformar-cada-registro-a-un-modelo-util","title":"3) Transformar cada registro a un modelo \u00fatil","text":"<pre><code>function aFilasTabla(eventos) {\n  return eventos.map(ev =&gt; ({\n    titulo: ev.titulo ?? \"\",\n    fecha: ev.fecha ?? \"\",\n    lugar: ev.lugar ?? \"\"\n  }));\n}\n</code></pre>"},{"location":"5-api/5-3-api-ejemplo-libreria/#4-renderizar-en-tabla-html-sencilla","title":"4) Renderizar en tabla HTML sencilla","text":"<pre><code>function renderTabla(datos, columnas, destino = document.body) {\n  const tabla = document.createElement(\"table\");\n\n  // cabecera\n  const thead = document.createElement(\"thead\");\n  const trH = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    const th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    trH.appendChild(th);\n  });\n  thead.appendChild(trH);\n  tabla.appendChild(thead);\n\n  // filas\n  const tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    const tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      const td = document.createElement(\"td\");\n      td.textContent = fila[col] ?? \"\";\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  destino.appendChild(tabla);\n}\n</code></pre>"},{"location":"5-api/5-3-api-ejemplo-libreria/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const data = await cargarAPI();\n  const eventos = obtenerEventos(data);\n  const filas = aFilasTabla(eventos);\n  renderTabla(filas, [\"titulo\", \"fecha\", \"lugar\"]);\n})();\n</code></pre>"},{"location":"5-api/5-3-api-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla (<code>fetch</code>) Con librer\u00eda (Axios) Parseo JSON <code>res.json()</code> manual Autom\u00e1tico en <code>response.data</code> Manejo de errores <code>try/catch</code> + comprobar <code>res.ok</code> <code>axios.isAxiosError</code>, c\u00f3digos y mensajes claros Timeouts Debes usar <code>AbortController</code> Opci\u00f3n <code>timeout</code> integrada Cancelaci\u00f3n <code>AbortController</code> Compatible con <code>{ signal }</code> en Axios 1.x Cabeceras Hay que pasarlas manualmente (opcional) F\u00e1cil a\u00f1adir/gestionar globalmente C\u00f3digo repetitivo M\u00e1s \u201cpegamento\u201d en cada endpoint Configuraci\u00f3n global y defaults Dependencias Ninguna 1 librer\u00eda ligera"},{"location":"5-api/5-3-api-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>response.json()</code> en vanilla y <code>response.data</code> en Axios?</li> <li>\u00bfQu\u00e9 ventaja aporta el par\u00e1metro <code>timeout</code> en una llamada a la API?</li> <li>\u00bfC\u00f3mo acceder\u00edas al array de resultados si el JSON de la API no viene bajo <code>resultados</code>, sino bajo otra clave?</li> <li>\u00bfQu\u00e9 columnas hemos decidido mostrar en la tabla y por qu\u00e9?</li> <li>\u00bfQu\u00e9 beneficios pr\u00e1cticos aporta Axios frente a <code>fetch</code> al trabajar con APIs REST?</li> </ol>"},{"location":"5-api/5-4-api-demo/","title":"5.4. Demo: Registro de actividades (API REST)","text":"<p>Ya hemos visto c\u00f3mo consumir una API REST con JavaScript puro (<code>fetch</code>) y c\u00f3mo simplificar la tarea usando Axios. Es momento de ver el resultado final funcionando en una p\u00e1gina real.</p> <p>En esta demo utilizamos el Registro de actividades de Castilla y Le\u00f3n, disponible en el portal de Datos Abiertos a trav\u00e9s de su API REST. El sistema hace la consulta a la API y muestra los resultados en una tabla accesible con b\u00fasqueda y paginaci\u00f3n.</p>"},{"location":"5-api/5-4-api-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<pre><code>* **Consulta real a la API REST** del Registro de actividades.\n* Dos enfoquess:\n        * **Vanilla (fetch)**: petici\u00f3n directa, parseo con `.json()` y renderizado manual.\n        * **Librer\u00eda (Axios)**: simplifica la carga, manejo de errores y cancelaci\u00f3n.\n* **Tabla accesible** con columnas clave (ejemplo: nombre, municipio, actividad\u2026).\n* Controles de **b\u00fasqueda** y **paginaci\u00f3n** para explorar los datos.\n* Manejo de **errores de red** con mensajes claros para el usuario.\n</code></pre> <p>Consejo</p> <p>Recuerda abrir el proyecto con un servidor local (<code>mkdocs serve</code>, Live Server en VS Code, etc.). Si intentas abrirlo directamente con <code>file://</code>, el navegador puede bloquear las peticiones por motivos de seguridad.</p>"},{"location":"5-api/5-4-api-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"5-api/5-4-api-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"5-api/5-4-api-demo/#demo-con-libreria-axios","title":"\u25b6\ufe0f Demo con librer\u00eda (Axios)","text":"<p>Abrir demo en vivo (Axios){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"5-api/5-4-api-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia observas entre la demo con <code>fetch</code> y la demo con Axios?</li> <li>\u00bfQu\u00e9 ventajas ofrece Axios a la hora de manejar errores o cancelar peticiones?</li> <li>\u00bfPor qu\u00e9 es importante incluir b\u00fasqueda y paginaci\u00f3n cuando los resultados de la API son muy numerosos?</li> <li>\u00bfQu\u00e9 har\u00edas si la API devuelve campos o nombres de claves diferentes a los que esperas?</li> <li>\u00bfQu\u00e9 problemas pueden surgir si consultas la API directamente desde el navegador sin servidor local?</li> </ol>"},{"location":"6-tablas/6-1-tablas-leccion/","title":"6.1. Visualizaci\u00f3n en tablas accesibles (Datos Abiertos JCyL)","text":"<p>Uno de los modos m\u00e1s directos de visualizar datos abiertos en la web es mediante tablas HTML. En esta lecci\u00f3n aprender\u00e1s a mostrar un dataset en una tabla accesible, clara y adaptable, utilizando como ejemplo las estad\u00edsticas de uso de redes sociales publicadas en el portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n.</p>"},{"location":"6-tablas/6-1-tablas-leccion/#por-que-tablas","title":"\ud83d\udccc \u00bfPor qu\u00e9 tablas?","text":"<p>Aunque existen gr\u00e1ficos y mapas muy vistosos, las tablas siguen siendo la herramienta fundamental para:</p> <ul> <li>Comparar valores de forma precisa (ver porcentajes, cifras exactas, a\u00f1os\u2026).</li> <li>Permitir la b\u00fasqueda r\u00e1pida de una fila o columna concreta.</li> <li>Garantizar accesibilidad a usuarios que usan lectores de pantalla.</li> <li>Facilitar exportaciones a CSV, Excel u otros formatos.</li> </ul>"},{"location":"6-tablas/6-1-tablas-leccion/#particularidades-al-trabajar-con-tablas-en-la-web","title":"\ud83d\udccc Particularidades al trabajar con tablas en la web","text":"<ol> <li> <p>Accesibilidad:</p> </li> <li> <p>Usa etiquetas sem\u00e1nticas (<code>&lt;table&gt;</code>, <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, <code>&lt;th&gt;</code>, <code>&lt;td&gt;</code>).</p> </li> <li> <p>A\u00f1ade <code>scope=\"col\"</code> en cabeceras y descripciones ARIA si es necesario.</p> </li> <li> <p>Tama\u00f1o de datos:</p> </li> <li> <p>Con pocos registros, una tabla simple funciona bien.</p> </li> <li> <p>Con miles de filas, conviene a\u00f1adir paginaci\u00f3n, filtros y ordenaci\u00f3n.</p> </li> <li> <p>Dise\u00f1o responsive:</p> </li> <li> <p>En pantallas peque\u00f1as las tablas tienden a desbordarse.</p> </li> <li> <p>Se puede a\u00f1adir scroll horizontal o transformar filas en tarjetas.</p> </li> <li> <p>Estilizado:</p> </li> <li> <p>Es importante resaltar cabeceras y alternar colores de fila para mejorar la legibilidad.</p> </li> </ol>"},{"location":"6-tablas/6-1-tablas-leccion/#dataset-de-ejemplo-redes-sociales","title":"\ud83d\udccc Dataset de ejemplo: redes sociales","text":"<p>El dataset <code>estadisticas-de-uso-de-redes-sociales.csv</code> contiene informaci\u00f3n sobre el uso de distintas plataformas a lo largo de varios a\u00f1os. Las columnas principales son, por ejemplo:</p> <ul> <li>A\u00f1o</li> <li>Red social</li> <li>Porcentaje de uso</li> </ul> <p>Ejemplo simplificado:</p> <pre><code>A\u00f1o,Red,Porcentaje\n2020,Facebook,74.5\n2020,Instagram,68.2\n2020,Twitter,42.1\n</code></pre>"},{"location":"6-tablas/6-1-tablas-leccion/#ventajas-de-representar-en-tablas","title":"\ud83d\udccc Ventajas de representar en tablas","text":"<ul> <li>Claridad: cada dato est\u00e1 en su fila y columna correspondiente.</li> <li>Precisi\u00f3n: los usuarios pueden leer valores exactos sin interpretar gr\u00e1ficos.</li> <li>Flexibilidad: se pueden a\u00f1adir controles de ordenaci\u00f3n, b\u00fasqueda y filtrado.</li> <li>Reutilizaci\u00f3n: una vez construida la tabla, los mismos datos pueden pasarse a un gr\u00e1fico o a un mapa.</li> </ul> <p>Consejo</p> <p>Antes de mostrar un dataset en una tabla: * Elige solo las columnas m\u00e1s relevantes (evita la sobrecarga de informaci\u00f3n). * Ordena por una columna clave (ej. a\u00f1o o red social). * Aseg\u00farate de que el dise\u00f1o sea accesible en m\u00f3viles y legible en dispositivos peque\u00f1os.</p>"},{"location":"6-tablas/6-1-tablas-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfPor qu\u00e9 sigue siendo \u00fatil mostrar datos en tablas, aunque existan gr\u00e1ficos m\u00e1s atractivos?</li> <li>\u00bfQu\u00e9 etiquetas sem\u00e1nticas son necesarias en una tabla HTML accesible?</li> <li>\u00bfQu\u00e9 problemas puede tener una tabla con miles de filas y c\u00f3mo podr\u00edas solucionarlos?</li> <li>\u00bfQu\u00e9 ventajas ofrece la representaci\u00f3n en tabla frente a un gr\u00e1fico de barras?</li> <li>\u00bfQu\u00e9 criterios usar\u00edas para decidir qu\u00e9 columnas mostrar en una tabla web?</li> </ol>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/","title":"6.2. Ejemplo con JavaScript puro (vanilla) \u2013 Tabla accesible","text":"<p>En este ejemplo vamos a mostrar el dataset de estad\u00edsticas de uso de redes sociales en una tabla HTML din\u00e1mica utilizando solo JavaScript puro.</p>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Cargar el CSV con <code>fetch</code>.</li> <li>Convertirlo a texto con <code>.text()</code>.</li> <li>Separar cabecera y filas (con <code>.split()</code> por l\u00edneas y columnas).</li> <li>Transformar las filas en objetos para trabajar de forma m\u00e1s clara.</li> <li>Generar la tabla HTML din\u00e1micamente con <code>&lt;table&gt;</code>, <code>&lt;thead&gt;</code> y <code>&lt;tbody&gt;</code>.</li> <li>Insertarla en la p\u00e1gina con <code>appendChild</code>.</li> </ol>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#1-cargar-el-csv","title":"1) Cargar el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/estadisticas-de-uso-de-redes-sociales.csv\");\n  const texto = await res.text();\n  return texto;\n}\n</code></pre>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#2-separar-cabecera-y-filas","title":"2) Separar cabecera y filas","text":"<pre><code>function parsearCSV(texto) {\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  let datos = lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n\n  return { cabeceras, datos };\n}\n</code></pre>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#3-renderizar-la-tabla-html","title":"3) Renderizar la tabla HTML","text":"<pre><code>function renderTabla(datos, columnas) {\n  let tabla = document.createElement(\"table\");\n\n  // cabecera\n  let thead = document.createElement(\"thead\");\n  let tr = document.createElement(\"tr\");\n  columnas.forEach(col =&gt; {\n    let th = document.createElement(\"th\");\n    th.scope = \"col\";\n    th.textContent = col;\n    tr.appendChild(th);\n  });\n  thead.appendChild(tr);\n  tabla.appendChild(thead);\n\n  // filas\n  let tbody = document.createElement(\"tbody\");\n  datos.forEach(fila =&gt; {\n    let tr = document.createElement(\"tr\");\n    columnas.forEach(col =&gt; {\n      let td = document.createElement(\"td\");\n      td.textContent = fila[col];\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  tabla.appendChild(tbody);\n\n  document.body.appendChild(tabla);\n}\n</code></pre>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#4-ponerlo-todo-junto","title":"4) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const texto = await cargarCSV();\n  const { cabeceras, datos } = parsearCSV(texto);\n\n  // mostramos solo algunas columnas clave\n  renderTabla(datos, [\"A\u00f1o\", \"Red\", \"Porcentaje\"]);\n})();\n</code></pre> <p>Consejo</p> <p>Con JavaScript puro es f\u00e1cil montar una tabla b\u00e1sica. Sin embargo, si quieres a\u00f1adir paginaci\u00f3n, b\u00fasqueda o filtros, pronto conviene usar una librer\u00eda como Tabulator o DataTables, que lo simplifican mucho.</p>"},{"location":"6-tablas/6-2-tablas-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <p>1. \u00bfQu\u00e9 devuelve la funci\u00f3n <code>cargarCSV()</code>? 2. \u00bfC\u00f3mo obtenemos las cabeceras del CSV en este ejemplo? 3. \u00bfQu\u00e9 hace <code>Object.fromEntries</code> al transformar cada fila? 4. \u00bfQu\u00e9 etiquetas HTML usamos para diferenciar cabecera (<code>&lt;thead&gt;</code>) y cuerpo (<code>&lt;tbody&gt;</code>)? 5. \u00bfQu\u00e9 limitaciones tiene esta tabla si el dataset tiene miles de registros?</p> <p>El siguiente paso ser\u00e1 ver c\u00f3mo mejorar esta tabla usando librer\u00edas externas como Tabulator, para a\u00f1adir funcionalidades avanzadas.</p>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/","title":"6.3. Ejemplo con librer\u00eda \u2013 Tablas interactivas (Tabulator)","text":"<p>En este apartado vamos a mostrar el dataset de estad\u00edsticas de uso de redes sociales en una tabla interactiva usando la librer\u00eda Tabulator. Con esta librer\u00eda a\u00f1adimos de forma sencilla funciones como ordenaci\u00f3n, filtros, b\u00fasqueda y paginaci\u00f3n que en vanilla JS tendr\u00edamos que programar a mano.</p>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>Con Tabulator podemos trabajar directamente desde un CDN. Incluimos el CSS y el JS en el <code>&lt;head&gt;</code> y despu\u00e9s nuestro propio script:</p> <pre><code>&lt;link href=\"https://cdn.jsdelivr.net/npm/tabulator-tables@5.6.2/dist/css/tabulator.min.css\" rel=\"stylesheet\"&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/tabulator-tables@5.6.2/dist/js/tabulator.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#flujo-de-trabajo-con-libreria","title":"\ud83d\udccc Flujo de trabajo con librer\u00eda","text":"<ol> <li>Incluir Tabulator desde CDN.</li> <li>Crear un contenedor <code>&lt;div&gt;</code> para la tabla.</li> <li>Definir las columnas que queremos mostrar (nombre, a\u00f1o, porcentaje\u2026).</li> <li>Cargar el CSV con <code>fetch</code> y convertirlo en array de objetos.</li> <li>Pasar los datos a Tabulator para que renderice la tabla.</li> <li>A\u00f1adir funciones extra: paginaci\u00f3n, b\u00fasqueda, ordenaci\u00f3n autom\u00e1tica.</li> </ol>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#1-html-base","title":"1) HTML base","text":"<pre><code>&lt;div id=\"tabla-redes\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#2-cargar-y-parsear-el-csv","title":"2) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/estadisticas-de-uso-de-redes-sociales.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#3-configurar-tabulator","title":"3) Configurar Tabulator","text":"<pre><code>async function initTabla() {\n  const datos = await cargarCSV();\n\n  new Tabulator(\"#tabla-redes\", {\n    data: datos,\n    layout: \"fitColumns\", // ajustar ancho al contenedor\n    pagination: \"local\",\n    paginationSize: 10,\n    columns: [\n      { title: \"A\u00f1o\", field: \"A\u00f1o\", sorter: \"number\" },\n      { title: \"Red social\", field: \"Red\", sorter: \"string\" },\n      { title: \"Porcentaje de uso\", field: \"Porcentaje\", sorter: \"number\" }\n    ],\n  });\n}\n\ninitTabla();\n</code></pre> <p>Consejo</p> <p>Con Tabulator puedes a\u00f1adir f\u00e1cilmente: * Filtros avanzados (<code>headerFilter</code>). * Exportaci\u00f3n a CSV, XLSX o PDF. * Temas visuales para adaptar el estilo a tu web.</p>"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla JS Con Tabulator Renderizado Manual con <code>createElement</code> Autom\u00e1tico con configuraci\u00f3n de columnas Ordenaci\u00f3n Programar a mano Opci\u00f3n <code>sorter</code> incluida Paginaci\u00f3n Programar a mano Opci\u00f3n <code>pagination</code> incluida B\u00fasqueda/Filtros Programar a mano <code>headerFilter</code> en cada columna Exportar datos A mano (Blob, CSV) M\u00e9todos <code>download()</code> integrados Curva de aprendizaje Muy baja (pero m\u00e1s trabajo) Baja: declarativo y r\u00e1pido"},{"location":"6-tablas/6-3-tablas-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 ventajas aporta usar Tabulator frente a una tabla creada a mano con JavaScript?</li> <li>\u00bfQu\u00e9 par\u00e1metro permite definir el n\u00famero de filas por p\u00e1gina?</li> <li>\u00bfC\u00f3mo har\u00edas para a\u00f1adir un filtro de b\u00fasqueda en la columna \u201cRed social\u201d?</li> <li>\u00bfQu\u00e9 opci\u00f3n de Tabulator usar\u00edas si quisieras exportar la tabla a CSV?</li> <li>\u00bfPor qu\u00e9 es \u00fatil <code>layout: \"fitColumns\"</code> en una tabla responsive?</li> </ol>"},{"location":"6-tablas/6-4-tablas-demo/","title":"6.4. Demo: Estad\u00edsticas de redes sociales en tabla","text":"<p>Ya hemos visto c\u00f3mo crear tablas accesibles con JavaScript puro y c\u00f3mo mejorarlas con una librer\u00eda como Tabulator. En esta demo mostramos el dataset de estad\u00edsticas de uso de redes sociales en formato CSV como una tabla din\u00e1mica.</p>"},{"location":"6-tablas/6-4-tablas-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<ul> <li>Carga real del dataset <code>estadisticas-de-uso-de-redes-sociales.csv</code>.</li> <li> <p>Dos enfoques:</p> </li> <li> <p>Vanilla: tabla HTML b\u00e1sica generada con <code>createElement</code>.</p> </li> <li>Librer\u00eda (Tabulator): tabla con b\u00fasqueda, ordenaci\u00f3n y paginaci\u00f3n.</li> <li>Manejo de errores y rutas relativas para trabajar en servidor local.</li> </ul> <p>Consejo</p> <p>Con Tabulator puedes a\u00f1adir filtros avanzados y exportaci\u00f3n de datos. Revisa la documentaci\u00f3n si quieres ir m\u00e1s all\u00e1 de lo mostrado aqu\u00ed.</p>"},{"location":"6-tablas/6-4-tablas-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"6-tablas/6-4-tablas-demo/#demo-con-libreria-tabulator","title":"\u25b6\ufe0f Demo con librer\u00eda (Tabulator)","text":"<p>Abrir demo en vivo{ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"6-tablas/6-4-tablas-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"6-tablas/6-4-tablas-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 ventajas aporta Tabulator frente a una tabla en HTML b\u00e1sico?</li> <li>\u00bfQu\u00e9 problemas puedes tener al mostrar un CSV grande directamente en una tabla?</li> <li>\u00bfQu\u00e9 significa <code>layout: \"fitColumns\"</code> en Tabulator?</li> <li>\u00bfQu\u00e9 mejoras podr\u00edas a\u00f1adir para hacer la tabla m\u00e1s accesible?</li> <li>\u00bfC\u00f3mo cambiar\u00edas el c\u00f3digo para mostrar solo las filas de un a\u00f1o concreto?</li> </ol>"},{"location":"7-graficos/7-1-graficos-leccion/","title":"7.1. Ejemplo con librer\u00eda \u2013 Tablas interactivas (Tabulator)","text":"<p>En este apartado vamos a mostrar el dataset de estad\u00edsticas de uso de redes sociales en una tabla interactiva usando la librer\u00eda Tabulator. Con esta librer\u00eda a\u00f1adimos de forma sencilla funciones como ordenaci\u00f3n, filtros, b\u00fasqueda y paginaci\u00f3n que en vanilla JS tendr\u00edamos que programar a mano.</p>"},{"location":"7-graficos/7-1-graficos-leccion/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>Con Tabulator podemos trabajar directamente desde un CDN. Incluimos el CSS y el JS en el <code>&lt;head&gt;</code> y despu\u00e9s nuestro propio script:</p> <pre><code>&lt;link href=\"https://cdn.jsdelivr.net/npm/tabulator-tables@5.6.2/dist/css/tabulator.min.css\" rel=\"stylesheet\"&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/tabulator-tables@5.6.2/dist/js/tabulator.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"7-graficos/7-1-graficos-leccion/#flujo-de-trabajo-con-libreria","title":"\ud83d\udccc Flujo de trabajo con librer\u00eda","text":"<ol> <li>Incluir Tabulator desde CDN.</li> <li>Crear un contenedor <code>&lt;div&gt;</code> para la tabla.</li> <li>Definir las columnas que queremos mostrar (nombre, a\u00f1o, porcentaje\u2026).</li> <li>Cargar el CSV con <code>fetch</code> y convertirlo en array de objetos.</li> <li>Pasar los datos a Tabulator para que renderice la tabla.</li> <li>A\u00f1adir funciones extra: paginaci\u00f3n, b\u00fasqueda, ordenaci\u00f3n autom\u00e1tica.</li> </ol>"},{"location":"7-graficos/7-1-graficos-leccion/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"7-graficos/7-1-graficos-leccion/#1-html-base","title":"1) HTML base","text":"<pre><code>&lt;div id=\"tabla-redes\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"7-graficos/7-1-graficos-leccion/#2-cargar-y-parsear-el-csv","title":"2) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/estadisticas-de-uso-de-redes-sociales.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"7-graficos/7-1-graficos-leccion/#3-configurar-tabulator","title":"3) Configurar Tabulator","text":"<pre><code>async function initTabla() {\n  const datos = await cargarCSV();\n\n  new Tabulator(\"#tabla-redes\", {\n    data: datos,\n    layout: \"fitColumns\", // ajustar ancho al contenedor\n    pagination: \"local\",\n    paginationSize: 10,\n    columns: [\n      { title: \"A\u00f1o\", field: \"A\u00f1o\", sorter: \"number\" },\n      { title: \"Red social\", field: \"Red\", sorter: \"string\" },\n      { title: \"Porcentaje de uso\", field: \"Porcentaje\", sorter: \"number\" }\n    ],\n  });\n}\n\ninitTabla();\n</code></pre> <p>Consejo</p> <p>Con Tabulator puedes a\u00f1adir f\u00e1cilmente: * Filtros avanzados (<code>headerFilter</code>). * Exportaci\u00f3n a CSV, XLSX o PDF. * Temas visuales para adaptar el estilo a tu web.</p>"},{"location":"7-graficos/7-1-graficos-leccion/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla JS Con Tabulator Renderizado Manual con <code>createElement</code> Autom\u00e1tico con configuraci\u00f3n de columnas Ordenaci\u00f3n Programar a mano Opci\u00f3n <code>sorter</code> incluida Paginaci\u00f3n Programar a mano Opci\u00f3n <code>pagination</code> incluida B\u00fasqueda/Filtros Programar a mano <code>headerFilter</code> en cada columna Exportar datos A mano (Blob, CSV) M\u00e9todos <code>download()</code> integrados Curva de aprendizaje Muy baja (pero m\u00e1s trabajo) Baja: declarativo y r\u00e1pido"},{"location":"7-graficos/7-1-graficos-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 ventajas aporta usar Tabulator frente a una tabla creada a mano con JavaScript?</li> <li>\u00bfQu\u00e9 par\u00e1metro permite definir el n\u00famero de filas por p\u00e1gina?</li> <li>\u00bfC\u00f3mo har\u00edas para a\u00f1adir un filtro de b\u00fasqueda en la columna \u201cRed social\u201d?</li> <li>\u00bfQu\u00e9 opci\u00f3n de Tabulator usar\u00edas si quisieras exportar la tabla a CSV?</li> <li>\u00bfPor qu\u00e9 es \u00fatil <code>layout: \"fitColumns\"</code> en una tabla responsive?</li> </ol>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/","title":"7.2. Ejemplo con JavaScript puro (vanilla) \u2013 Gr\u00e1fico","text":"<p>En este ejemplo vamos a crear un gr\u00e1fico de barras usando \u00fanicamente la API de Canvas de HTML5, sin librer\u00edas externas. El dataset ser\u00e1 el de estad\u00edsticas de uso de redes sociales de la Junta de Castilla y Le\u00f3n.</p>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Cargar el CSV con <code>fetch</code>.</li> <li>Parsearlo a objetos (como en los ejemplos anteriores).</li> <li>Filtrar los datos de un a\u00f1o concreto.</li> <li>Configurar las dimensiones del canvas.</li> <li>Calcular escalas para representar porcentajes como alturas de barras.</li> <li>Dibujar ejes, etiquetas y barras con la API <code>CanvasRenderingContext2D</code>.</li> </ol>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#1-html-base","title":"1) HTML base","text":"<pre><code>&lt;canvas id=\"grafico\" width=\"600\" height=\"400\" aria-label=\"Gr\u00e1fico de uso de redes sociales\" role=\"img\"&gt;&lt;/canvas&gt;\n</code></pre>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#2-cargar-y-parsear-el-csv","title":"2) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/estadisticas-de-uso-de-redes-sociales.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#3-filtrar-por-ano-ej-2020","title":"3) Filtrar por a\u00f1o (ej. 2020)","text":"<pre><code>function filtrarPorAno(datos, ano = \"2020\") {\n  return datos.filter(d =&gt; d.A\u00f1o === ano);\n}\n</code></pre>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#4-dibujar-grafico-en-canvas","title":"4) Dibujar gr\u00e1fico en canvas","text":"<pre><code>function dibujarGrafico(ctx, datos) {\n  const ancho = ctx.canvas.width;\n  const alto = ctx.canvas.height;\n\n  ctx.clearRect(0, 0, ancho, alto);\n\n  const margen = 50;\n  const anchoBarra = (ancho - 2 * margen) / datos.length;\n  const maxValor = Math.max(...datos.map(d =&gt; parseFloat(d.Porcentaje)));\n\n  // Eje Y\n  ctx.beginPath();\n  ctx.moveTo(margen, margen);\n  ctx.lineTo(margen, alto - margen);\n  ctx.stroke();\n\n  // Eje X\n  ctx.beginPath();\n  ctx.moveTo(margen, alto - margen);\n  ctx.lineTo(ancho - margen, alto - margen);\n  ctx.stroke();\n\n  // Dibujar barras\n  datos.forEach((d, i) =&gt; {\n    const valor = parseFloat(d.Porcentaje);\n    const altura = (valor / maxValor) * (alto - 2 * margen);\n\n    const x = margen + i * anchoBarra;\n    const y = alto - margen - altura;\n\n    ctx.fillStyle = \"#ba273b\"; // rojo corporativo JCyL\n    ctx.fillRect(x, y, anchoBarra * 0.6, altura);\n\n    // Etiqueta X\n    ctx.fillStyle = \"black\";\n    ctx.font = \"12px sans-serif\";\n    ctx.fillText(d.Red, x, alto - margen + 15);\n\n    // Etiqueta valor\n    ctx.fillText(valor + \"%\", x, y - 5);\n  });\n}\n</code></pre>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const datos = await cargarCSV();\n  const datos2020 = filtrarPorAno(datos, \"2020\");\n\n  const canvas = document.getElementById(\"grafico\");\n  const ctx = canvas.getContext(\"2d\");\n\n  dibujarGrafico(ctx, datos2020);\n})();\n</code></pre> <p>Consejo</p> <p>Este enfoque con Canvas te ayuda a comprender c\u00f3mo se dibujan gr\u00e1ficos \u201cdesde cero\u201d. Sin embargo, si quieres a\u00f1adir leyendas, escalas autom\u00e1ticas o varios tipos de gr\u00e1ficos, es m\u00e1s pr\u00e1ctico usar una librer\u00eda como Chart.js.</p>"},{"location":"7-graficos/7-2-graficos-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <p>1. \u00bfQu\u00e9 representa el valor <code>maxValor</code> en el c\u00f3digo del gr\u00e1fico? 2. \u00bfPor qu\u00e9 normalizamos las alturas de las barras en funci\u00f3n del valor m\u00e1ximo? 3. \u00bfQu\u00e9 funci\u00f3n del canvas usamos para dibujar rect\u00e1ngulos (barras)? 4. \u00bfC\u00f3mo cambiar\u00edas el c\u00f3digo para representar el a\u00f1o 2021 en lugar de 2020? 5. \u00bfQu\u00e9 limitaciones tiene este enfoque frente a una librer\u00eda especializada en gr\u00e1ficos?</p>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/","title":"7.3. Ejemplo con librer\u00eda \u2013 Chart.js","text":"<p>En este ejemplo vamos a crear un gr\u00e1fico de barras con la librer\u00eda Chart.js a partir del dataset de estad\u00edsticas de uso de redes sociales. Con Chart.js podemos generar gr\u00e1ficos de manera sencilla, con estilos atractivos y funcionalidades adicionales como leyendas, tooltips y escalas autom\u00e1ticas.</p>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>Incluimos Chart.js directamente desde un CDN en el HTML:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Y a\u00f1adimos un <code>&lt;canvas&gt;</code> para el gr\u00e1fico:</p> <pre><code>&lt;canvas id=\"graficoRedes\" width=\"600\" height=\"400\"&gt;&lt;/canvas&gt;\n</code></pre>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#flujo-de-trabajo-con-chartjs","title":"\ud83d\udccc Flujo de trabajo con Chart.js","text":"<ol> <li>Incluir Chart.js desde CDN.</li> <li>Cargar el dataset CSV con <code>fetch</code>.</li> <li>Parsear el contenido a objetos.</li> <li>Filtrar por a\u00f1o (ej. 2020).</li> <li>Preparar arrays de etiquetas y valores.</li> <li>Configurar el gr\u00e1fico con <code>new Chart()</code>.</li> <li>Mostrar el gr\u00e1fico en el canvas.</li> </ol>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#1-cargar-y-parsear-el-csv","title":"1) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/estadisticas-de-uso-de-redes-sociales.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#2-filtrar-datos-por-ano","title":"2) Filtrar datos por a\u00f1o","text":"<pre><code>function filtrarPorAno(datos, ano = \"2020\") {\n  return datos.filter(d =&gt; d.A\u00f1o === ano);\n}\n</code></pre>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#3-preparar-arrays-para-chartjs","title":"3) Preparar arrays para Chart.js","text":"<pre><code>function prepararDatos(datos) {\n  const etiquetas = datos.map(d =&gt; d.Red);\n  const valores = datos.map(d =&gt; parseFloat(d.Porcentaje));\n  return { etiquetas, valores };\n}\n</code></pre>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#4-crear-el-grafico","title":"4) Crear el gr\u00e1fico","text":"<pre><code>async function crearGrafico() {\n  const datos = await cargarCSV();\n  const datos2020 = filtrarPorAno(datos, \"2020\");\n  const { etiquetas, valores } = prepararDatos(datos2020);\n\n  const ctx = document.getElementById(\"graficoRedes\").getContext(\"2d\");\n\n  new Chart(ctx, {\n    type: \"bar\",\n    data: {\n      labels: etiquetas,\n      datasets: [{\n        label: \"Porcentaje de uso (%)\",\n        data: valores,\n        backgroundColor: \"#ba273b\"\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: { display: true },\n        tooltip: { enabled: true }\n      },\n      scales: {\n        y: { beginAtZero: true, title: { display: true, text: \"Porcentaje\" } },\n        x: { title: { display: true, text: \"Red social\" } }\n      }\n    }\n  });\n}\n\ncrearGrafico();\n</code></pre> <p>Consejo</p> <p>Chart.js soporta muchos tipos de gr\u00e1ficos:</p> <ul> <li><code>bar</code> (barras)</li> <li><code>line</code> (l\u00edneas)</li> <li><code>pie</code> (tarta)</li> <li><code>doughnut</code> (anillo)</li> <li><code>radar</code>, <code>polarArea</code>, etc.</li> </ul> <p>Puedes cambiar <code>type: \"bar\"</code> por otro para experimentar.  </p>"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Canvas (vanilla) Chart.js Dibujo b\u00e1sico A mano con <code>fillRect</code>, <code>fillText</code> Autom\u00e1tico con <code>datasets</code> y <code>labels</code> Escalas Manual (c\u00e1lculo de proporciones) Autom\u00e1ticas y configurables Estilos Manual (colores, fuentes) Declarativos (<code>backgroundColor</code>, <code>border\u2026</code>) Interactividad Hay que programarla Incluida (tooltips, leyenda, hover) Tipos de gr\u00e1fico Solo lo que programes M\u00faltiples tipos listos para usar Curva de uso Baja pero requiere m\u00e1s trabajo Muy baja: gr\u00e1fico listo en pocas l\u00edneas"},{"location":"7-graficos/7-3-graficos-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia principal hay entre el gr\u00e1fico en canvas (vanilla) y el de Chart.js?</li> <li>\u00bfQu\u00e9 arrays preparamos para pasarlos al gr\u00e1fico en Chart.js?</li> <li>\u00bfQu\u00e9 propiedad permite indicar el tipo de gr\u00e1fico (<code>bar</code>, <code>line</code>, <code>pie</code>\u2026)?</li> <li>\u00bfC\u00f3mo activar\u00edas una etiqueta en el eje X que muestre \u201cRed social\u201d?</li> <li>\u00bfQu\u00e9 otro tipo de gr\u00e1fico probar\u00edas con este dataset y por qu\u00e9?</li> </ol>"},{"location":"7-graficos/7-4-graficos-demo/","title":"7.4. Demo: Estad\u00edsticas de redes sociales en gr\u00e1ficos","text":"<p>Ya hemos visto c\u00f3mo generar gr\u00e1ficos con Canvas (vanilla) y c\u00f3mo simplificarlos usando Chart.js. En esta demo mostramos el dataset de estad\u00edsticas de uso de redes sociales como un gr\u00e1fico de barras.</p>"},{"location":"7-graficos/7-4-graficos-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<ul> <li>Carga real del dataset <code>estadisticas-de-uso-de-redes-sociales.csv</code>.</li> <li> <p>Dos enfoques:</p> </li> <li> <p>Vanilla (Canvas API): gr\u00e1fico dibujado manualmente.</p> </li> <li>Librer\u00eda (Chart.js): gr\u00e1fico de barras interactivo y responsive.</li> <li>Ejemplo filtrado para el a\u00f1o 2020 (puedes adaptarlo a otros a\u00f1os).</li> </ul> <p>Consejo</p> <p>Chart.js permite cambiar f\u00e1cilmente el tipo de gr\u00e1fico (<code>line</code>, <code>pie</code>, <code>doughnut</code>, etc.). Experimenta cambiando la configuraci\u00f3n para visualizar los mismos datos de formas diferentes.</p>"},{"location":"7-graficos/7-4-graficos-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"7-graficos/7-4-graficos-demo/#demo-con-libreria-chartjs","title":"\u25b6\ufe0f Demo con librer\u00eda (Chart.js)","text":"<p>Abrir demo en vivo{ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"7-graficos/7-4-graficos-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"7-graficos/7-4-graficos-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 ventaja tiene Chart.js frente a dibujar con Canvas manualmente?</li> <li>\u00bfQu\u00e9 arrays necesitamos preparar para pasar datos a Chart.js?</li> <li>\u00bfQu\u00e9 propiedad controla el tipo de gr\u00e1fico en Chart.js?</li> <li>\u00bfC\u00f3mo cambiar\u00edas el c\u00f3digo para representar datos de 2021 en lugar de 2020?</li> <li>\u00bfQu\u00e9 tipo de gr\u00e1fico (adem\u00e1s de barras) ser\u00eda \u00fatil para comparar el uso de redes sociales?</li> </ol>"},{"location":"8-mapas/8-1-mapas-leccion/","title":"8.1. Visualizaci\u00f3n en mapas (Datos Abiertos JCyL)","text":"<p>Adem\u00e1s de tablas y gr\u00e1ficos, muchos datasets del portal de Datos Abiertos de la Junta de Castilla y Le\u00f3n pueden representarse en mapas web. Esto es especialmente \u00fatil cuando los datos incluyen una referencia geogr\u00e1fica: coordenadas, direcciones o municipios.</p>"},{"location":"8-mapas/8-1-mapas-leccion/#por-que-mapas-web","title":"\ud83d\udccc \u00bfPor qu\u00e9 mapas web?","text":"<p>Los mapas son una de las formas m\u00e1s potentes de visualizar y explorar informaci\u00f3n porque:</p> <ul> <li>Permiten situar los datos en un territorio real.</li> <li>Facilitan descubrir patrones espaciales (concentraciones, dispersi\u00f3n, \u00e1reas de influencia).</li> <li>Hacen m\u00e1s intuitiva la relaci\u00f3n entre datos y geograf\u00eda.</li> <li>Son interactivos: permiten zoom, desplazamiento y clics en los puntos.</li> </ul> <p>En datos abiertos, se usan mucho para representar infraestructuras, monumentos, servicios p\u00fablicos, eventos o equipamientos educativos.</p>"},{"location":"8-mapas/8-1-mapas-leccion/#requisitos-de-un-dataset-para-mapas","title":"\ud83d\udccc Requisitos de un dataset para mapas","text":"<p>Para poder usar un dataset en mapas web, este debe contener:</p> <ol> <li> <p>Coordenadas en formato decimal (latitud y longitud).</p> </li> <li> <p>Ejemplo: <code>40.6565, -4.7003</code>.</p> </li> <li> <p>A veces vienen en un \u00fanico campo (<code>lat#lon</code>), que habr\u00e1 que dividir.</p> </li> <li> <p>Identificaci\u00f3n clara del punto (nombre, direcci\u00f3n, c\u00f3digo).</p> </li> <li> <p>(Opcional) Categor\u00eda o tipo del lugar.</p> </li> <li> <p>Ejemplo: en monumentos: \u201cCatedral\u201d, \u201cCastillo\u201d, \u201cMuseo\u201d.</p> </li> <li> <p>En centros docentes: \u201cIES\u201d, \u201cCEIP\u201d, \u201cFP\u201d.</p> </li> <li> <p>(Opcional) Informaci\u00f3n adicional para mostrar en un popup.</p> </li> <li> <p>Descripci\u00f3n, enlace web, tel\u00e9fono, etc.</p> </li> </ol>"},{"location":"8-mapas/8-1-mapas-leccion/#ejemplo-de-dataset-valido","title":"\ud83d\udccc Ejemplo de dataset v\u00e1lido","text":"<pre><code>Nombre,Lat,Lon\nCatedral de Le\u00f3n,42.5991,-5.5718\nMurallas de \u00c1vila,40.6565,-4.7003\nPlaza Mayor de Salamanca,40.9650,-5.6635\n</code></pre> <p>Con estas tres columnas ya podemos situar puntos en un mapa.</p>"},{"location":"8-mapas/8-1-mapas-leccion/#herramientas-habituales","title":"\ud83d\udccc Herramientas habituales","text":"<ul> <li> <p>Vanilla JS (b\u00e1sico):</p> </li> <li> <p>Insertar un mapa est\u00e1tico de Google Maps o OpenStreetMap con <code>&lt;iframe&gt;</code>.</p> </li> <li> <p>Solo \u00fatil para mostrar un punto o direcci\u00f3n.</p> </li> <li> <p>Leaflet (librer\u00eda ligera):</p> </li> <li> <p>Permite cargar m\u00faltiples puntos.</p> </li> <li>Soporta popups, iconos personalizados y capas.</li> <li> <p>Es libre, gratuito y muy usado en proyectos educativos.</p> </li> <li> <p>Otras librer\u00edas:</p> </li> <li> <p>Mapbox GL JS (alta calidad visual, requiere API key).</p> </li> <li>Google Maps JS API (muy popular, pero con limitaciones de uso gratuito).</li> </ul>"},{"location":"8-mapas/8-1-mapas-leccion/#ventajas-de-representar-en-mapas","title":"\ud83d\udccc Ventajas de representar en mapas","text":"<ul> <li>Intuitivo: cualquiera entiende una localizaci\u00f3n en un mapa.</li> <li>Exploraci\u00f3n libre: el usuario puede desplazarse, ampliar y descubrir.</li> <li>Contexto espacial: no solo ves el dato, tambi\u00e9n el entorno.</li> <li>Interactividad: popups, capas, iconos\u2026 enriquecen la experiencia.</li> </ul>"},{"location":"8-mapas/8-1-mapas-leccion/#limitaciones-y-retos","title":"\ud83d\udccc Limitaciones y retos","text":"<ul> <li>Requieren coordenadas fiables.</li> <li>Si el dataset es muy grande (miles de puntos), el mapa puede volverse lento.</li> <li>En m\u00f3viles, los mapas interactivos consumen m\u00e1s recursos.</li> <li>Es necesario ajustar zoom y centro inicial para no mostrar un mapa vac\u00edo.</li> </ul> <p>Consejo</p> <p>Antes de crear un mapa, revisa:</p> <ul> <li>Que todas las coordenadas est\u00e9n en formato decimal.</li> <li>Que no falten valores en la latitud o longitud.</li> <li>Que el rango de valores sea v\u00e1lido: latitudes entre -90 y 90, longitudes entre -180 y 180.</li> <li>Qu\u00e9 informaci\u00f3n extra puedes incluir en los popups para que el mapa sea m\u00e1s \u00fatil.</li> </ul>"},{"location":"8-mapas/8-1-mapas-leccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 campos son imprescindibles en un dataset para representarlo en un mapa?</li> <li>\u00bfQu\u00e9 ventajas tienen los mapas frente a tablas o gr\u00e1ficos?</li> <li>\u00bfQu\u00e9 problemas pueden surgir al mostrar un dataset con miles de puntos?</li> <li>\u00bfPor qu\u00e9 es importante normalizar las coordenadas antes de usarlas en un mapa?</li> <li>\u00bfQu\u00e9 librer\u00eda libre y muy usada podemos emplear para mapas interactivos?</li> </ol>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/","title":"8.2. Ejemplo con JavaScript puro (vanilla) \u2013 Mapa b\u00e1sico","text":"<p>En este ejemplo vamos a mostrar c\u00f3mo representar la localizaci\u00f3n de los centros docentes de Castilla y Le\u00f3n en un mapa sencillo usando solo HTML y JavaScript puro, sin librer\u00edas externas.</p>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#flujo-de-trabajo-con-vanilla-js","title":"\ud83d\udccc Flujo de trabajo con vanilla JS","text":"<ol> <li>Cargar el CSV con <code>fetch</code>.</li> <li>Parsearlo a objetos (leer cabecera y filas).</li> <li>Seleccionar un subconjunto (por ejemplo, los primeros centros o los de una provincia concreta).</li> <li>Obtener sus coordenadas (latitud y longitud).</li> <li>Generar un mapa b\u00e1sico con un <code>&lt;iframe&gt;</code> de OpenStreetMap o Google Maps.</li> </ol>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#1-html-base","title":"1) HTML base","text":"<pre><code>&lt;div id=\"mapa\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#2-cargar-y-parsear-el-csv","title":"2) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/directorio-de-centros-docentes.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#3-seleccionar-un-centro-y-sus-coordenadas","title":"3) Seleccionar un centro y sus coordenadas","text":"<pre><code>function obtenerCentroEjemplo(datos) {\n  // Nos quedamos con el primer centro que tenga coordenadas v\u00e1lidas\n  return datos.find(d =&gt; d.Lat &amp;&amp; d.Lon);\n}\n</code></pre>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#4-insertar-un-mapa-con-iframe","title":"4) Insertar un mapa con iframe","text":"<pre><code>function mostrarMapa(centro) {\n  const lat = centro.Lat;\n  const lon = centro.Lon;\n\n  // Usamos OpenStreetMap con zoom 15\n  const url = `https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.01},${lat-0.01},${lon+0.01},${lat+0.01}&amp;layer=mapnik&amp;marker=${lat},${lon}`;\n\n  const iframe = document.createElement(\"iframe\");\n  iframe.src = url;\n  iframe.width = \"600\";\n  iframe.height = \"400\";\n  iframe.style.border = \"1px solid #ccc\";\n\n  document.getElementById(\"mapa\").appendChild(iframe);\n}\n</code></pre>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#5-ponerlo-todo-junto","title":"5) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const datos = await cargarCSV();\n  const centro = obtenerCentroEjemplo(datos);\n\n  if (centro) {\n    mostrarMapa(centro);\n    console.log(\"Centro mostrado en el mapa:\", centro.Nombre, centro.Municipio);\n  } else {\n    console.error(\"No se encontraron centros con coordenadas v\u00e1lidas.\");\n  }\n})();\n</code></pre> <p>Consejo</p> <p>Este enfoque con <code>&lt;iframe&gt;</code> es muy b\u00e1sico:</p> <ul> <li>Solo permite mostrar un punto fijo en el mapa.</li> <li>No ofrece interacci\u00f3n avanzada (zoom din\u00e1mico, varios puntos, popups\u2026).</li> </ul> <p>En la siguiente lecci\u00f3n usaremos Leaflet, una librer\u00eda libre y ligera, para a\u00f1adir todas esas funciones.  </p>"},{"location":"8-mapas/8-2-mapas-ejemplo-vanilla/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 campos del CSV son necesarios para situar un centro en un mapa?</li> <li>\u00bfQu\u00e9 servicio gratuito hemos usado para generar el mapa dentro de un <code>&lt;iframe&gt;</code>?</li> <li>\u00bfQu\u00e9 limitaciones tiene este enfoque frente a una librer\u00eda como Leaflet?</li> <li>\u00bfC\u00f3mo cambiar\u00edas el c\u00f3digo para mostrar un centro diferente al primero?</li> <li>\u00bfQu\u00e9 par\u00e1metro de la URL controla el nivel de zoom en OpenStreetMap?</li> </ol>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/","title":"8.3. Ejemplo con librer\u00eda \u2013 Leaflet","text":"<p>En este ejemplo vamos a mostrar el dataset de centros docentes de Castilla y Le\u00f3n en un mapa interactivo usando la librer\u00eda Leaflet. Con Leaflet podemos representar muchos puntos a la vez, a\u00f1adir popups con informaci\u00f3n y permitir al usuario interactuar con el mapa.</p>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#como-incluir-la-libreria","title":"\ud83d\udce6 C\u00f3mo incluir la librer\u00eda","text":"<p>A\u00f1adimos los estilos y el script de Leaflet desde un CDN en el HTML:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" /&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"&gt;&lt;/script&gt;\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Creamos un contenedor para el mapa:</p> <pre><code>&lt;div id=\"mapa\" style=\"height: 500px; border: 1px solid #ccc;\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#flujo-de-trabajo-con-leaflet","title":"\ud83d\udccc Flujo de trabajo con Leaflet","text":"<ol> <li>Incluir Leaflet desde CDN.</li> <li>Cargar el CSV con <code>fetch</code>.</li> <li>Parsear el contenido a objetos.</li> <li>Inicializar el mapa con un centro y nivel de zoom.</li> <li>A\u00f1adir una capa base de OpenStreetMap.</li> <li>Recorrer los centros y colocar un marcador en cada uno.</li> <li>Configurar popups para mostrar nombre, localidad y tipo de centro.</li> </ol>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#codigo-paso-a-paso","title":"\ud83e\udde9 C\u00f3digo paso a paso","text":""},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#1-cargar-y-parsear-el-csv","title":"1) Cargar y parsear el CSV","text":"<pre><code>async function cargarCSV() {\n  const res = await fetch(\"datasets/csv/directorio-de-centros-docentes.csv\");\n  const texto = await res.text();\n\n  let lineas = texto.trim().split(\"\\n\");\n  let cabeceras = lineas.shift().split(\",\");\n\n  return lineas.map(linea =&gt; {\n    let valores = linea.split(\",\");\n    return Object.fromEntries(cabeceras.map((c, i) =&gt; [c, valores[i]]));\n  });\n}\n</code></pre>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#2-inicializar-el-mapa","title":"2) Inicializar el mapa","text":"<pre><code>function initMapa() {\n  // Centro geogr\u00e1fico aproximado de Castilla y Le\u00f3n\n  const mapa = L.map(\"mapa\").setView([41.65, -4.72], 7);\n\n  // Capa base de OpenStreetMap\n  L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OSM&lt;/a&gt; contributors'\n  }).addTo(mapa);\n\n  return mapa;\n}\n</code></pre>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#3-anadir-los-centros-al-mapa","title":"3) A\u00f1adir los centros al mapa","text":"<pre><code>function dibujarCentros(mapa, centros) {\n  centros.forEach(c =&gt; {\n    const lat = parseFloat(c.Lat);\n    const lon = parseFloat(c.Lon);\n\n    if (!Number.isFinite(lat) || !Number.isFinite(lon)) return;\n\n    const popup = `\n      &lt;strong&gt;${c.Nombre || \"Centro sin nombre\"}&lt;/strong&gt;&lt;br&gt;\n      ${c.Municipio || \"\"} (${c.Provincia || \"\"})&lt;br&gt;\n      Tipo: ${c.Tipo || \"\u2014\"}\n    `;\n\n    L.marker([lat, lon]).addTo(mapa).bindPopup(popup);\n  });\n}\n</code></pre>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#4-ponerlo-todo-junto","title":"4) Ponerlo todo junto","text":"<pre><code>(async () =&gt; {\n  const datos = await cargarCSV();\n  const mapa = initMapa();\n  dibujarCentros(mapa, datos);\n})();\n</code></pre> <p>Consejo</p> <p>Leaflet permite a\u00f1adir muchas funcionalidades extra:</p> <ul> <li>Clustering de puntos si hay miles de registros (<code>Leaflet.markercluster</code>).</li> <li>Capas adicionales (sat\u00e9lite, topograf\u00eda, etc.).</li> <li>Iconos personalizados seg\u00fan el tipo de centro.</li> </ul>"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#comparacion-con-el-enfoque-vanilla","title":"\u2696\ufe0f Comparaci\u00f3n con el enfoque vanilla","text":"Aspecto Vanilla (<code>iframe</code>) Con Leaflet Puntos Solo 1 punto fijo M\u00faltiples puntos din\u00e1micos Interacci\u00f3n No (mapa est\u00e1tico) S\u00ed (zoom, pan, popups) Estilo Limitado al servicio embebido Personalizable (iconos, colores, capas) Popups No S\u00ed, muy flexibles Escalabilidad Muy limitado Miles de puntos con clustering"},{"location":"8-mapas/8-3-mapas-ejemplo-libreria/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 librer\u00eda hemos usado para crear el mapa interactivo?</li> <li>\u00bfQu\u00e9 campos del CSV se necesitan para situar los centros en el mapa?</li> <li>\u00bfC\u00f3mo se a\u00f1ade una capa base de OpenStreetMap en Leaflet?</li> <li>\u00bfQu\u00e9 m\u00e9todo de Leaflet se usa para a\u00f1adir marcadores (<code>marker</code>) y popups (<code>bindPopup</code>)?</li> <li>\u00bfQu\u00e9 mejoras implementar\u00edas si el dataset tuviera miles de centros?</li> </ol>"},{"location":"8-mapas/8-4-mapas-demo/","title":"8.4. Demo: Centros docentes en mapa (CSV)","text":"<p>Ya hemos visto c\u00f3mo representar un dataset geogr\u00e1fico en mapas, tanto con un enfoque b\u00e1sico (vanilla + iframe) como con una librer\u00eda avanzada (Leaflet). Es momento de ver el resultado final en p\u00e1ginas reales.</p> <p>En esta demo utilizamos el dataset de directorio de centros docentes de Castilla y Le\u00f3n en formato CSV. El sistema carga las coordenadas de los centros y los sit\u00faa en un mapa interactivo, permitiendo explorar los datos de manera intuitiva.</p>"},{"location":"8-mapas/8-4-mapas-demo/#que-encontraras-en-las-demos","title":"\ud83d\udccc Qu\u00e9 encontrar\u00e1s en las demos","text":"<ul> <li>Carga real del dataset <code>directorio-de-centros-docentes.csv</code>.</li> <li> <p>Dos enfoques:</p> <ul> <li>Vanilla (iframe OSM): muestra un solo centro en un mapa b\u00e1sico.</li> <li>Librer\u00eda (Leaflet): coloca todos los centros en un mapa interactivo con popups.</li> </ul> </li> <li> <p>Posibilidad de navegar, hacer zoom y clicar en cada centro para ver m\u00e1s informaci\u00f3n.</p> </li> <li>Uso de datos abiertos con contexto geogr\u00e1fico real.</li> </ul> <p>Consejo</p> <p>Recuerda abrir el proyecto con un servidor local (<code>mkdocs serve</code>, Live Server, etc.). Si intentas abrirlo directamente con <code>file://</code>, el navegador puede bloquear la carga del CSV por motivos de seguridad. Verifica tambi\u00e9n en DevTools \u2192 Network que el archivo se carga desde <code>datasets/csv/directorio-de-centros-docentes.csv</code>.</p>"},{"location":"8-mapas/8-4-mapas-demo/#acceso-a-las-demos","title":"\ud83d\udccc Acceso a las demos","text":""},{"location":"8-mapas/8-4-mapas-demo/#demo-con-libreria-leaflet","title":"\u25b6\ufe0f Demo con librer\u00eda (Leaflet)","text":"<p>Abrir demo en vivo{ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"8-mapas/8-4-mapas-demo/#demo-con-javascript-puro-vanilla","title":"\u25b6\ufe0f Demo con JavaScript puro (vanilla)","text":"<p>Abrir demo en vivo (vanilla){ target=_blank }</p> <p>Tambi\u00e9n puedes verla incrustada aqu\u00ed:</p>"},{"location":"8-mapas/8-4-mapas-demo/#preguntas-de-reflexion","title":"\ud83d\udcdd Preguntas de reflexi\u00f3n","text":"<p>Repaso</p> <ol> <li>\u00bfQu\u00e9 diferencia principal hay entre el mapa con iframe (vanilla) y el interactivo con Leaflet?</li> <li>\u00bfQu\u00e9 campos del CSV (<code>Lat</code>, <code>Lon</code>, <code>Nombre</code>, <code>Municipio</code>) son imprescindibles para situar los centros en el mapa?</li> <li>\u00bfC\u00f3mo gestionar\u00eda Leaflet un dataset con miles de centros para no saturar el mapa?</li> <li>\u00bfQu\u00e9 ventajas aporta un mapa interactivo para explorar datos abiertos frente a una tabla de coordenadas?</li> <li>\u00bfQu\u00e9 usos educativos se te ocurren para un mapa de centros docentes?</li> </ol>"},{"location":"proyecto/ejercicios/","title":"7.2 Ejercicios Pr\u00e1cticos","text":""},{"location":"proyecto/ejercicios/#ejercicio-1-lista-de-tareas-mejorada","title":"Ejercicio 1: Lista de Tareas Mejorada","text":"<p>Objetivo: Crear una aplicaci\u00f3n de lista de tareas con las siguientes caracter\u00edsticas:</p> <ol> <li>Agregar nuevas tareas</li> <li>Marcar tareas como completadas</li> <li>Filtrar tareas (todas, activas, completadas)</li> <li>Editar tareas existentes</li> <li>Eliminar tareas</li> <li>Persistencia en localStorage</li> </ol> <p>Requisitos T\u00e9cnicos: - Usar la Composition API - Implementar un store de Pinia - Usar componentes reutilizables - Dise\u00f1o responsivo</p> <p>Pasos Sugeridos: 1. Configura un nuevo proyecto con Vite + Vue 3 2. Crea los componentes necesarios 3. Implementa la l\u00f3gica del store 4. A\u00f1ade los estilos necesarios</p>"},{"location":"proyecto/ejercicios/#ejercicio-2-busqueda-de-usuarios-con-api","title":"Ejercicio 2: B\u00fasqueda de Usuarios con API","text":"<p>Objetivo: Crear una aplicaci\u00f3n que permita buscar usuarios de GitHub y ver sus perfiles.</p> <p>Caracter\u00edsticas: - Campo de b\u00fasqueda por nombre de usuario - Lista de resultados con avatar y nombre de usuario - Vista detallada al hacer clic en un usuario - Loading states y manejo de errores</p> <p>API a utilizar: <pre><code>GET https://api.github.com/search/users?q={query}\nGET https://api.github.com/users/{username}\n</code></pre></p> <p>Bonus: - Paginaci\u00f3n de resultados - Cache de b\u00fasquedas - Historial de b\u00fasquedas recientes</p>"},{"location":"proyecto/ejercicios/#ejercicio-3-tienda-en-linea","title":"Ejercicio 3: Tienda en L\u00ednea","text":"<p>Objetivo: Desarrollar un cat\u00e1logo de productos con carrito de compras.</p> <p>Requisitos: 1. Lista de productos con im\u00e1genes 2. Filtrado por categor\u00edas 3. B\u00fasqueda de productos 4. Carrito de compras funcional 5. Formulario de checkout (simulado)</p> <p>Estructura de Datos Ejemplo: <pre><code>const productos = [\n  {\n    id: 1,\n    nombre: 'Laptop Gamer',\n    precio: 1200,\n    categoria: 'tecnologia',\n    imagen: 'laptop.jpg',\n    descripcion: 'Potente laptop para gaming'\n  },\n  // m\u00e1s productos...\n];\n</code></pre></p>"},{"location":"proyecto/ejercicios/#ejercicio-4-panel-de-administracion","title":"Ejercicio 4: Panel de Administraci\u00f3n","text":"<p>Crea un panel de administraci\u00f3n con las siguientes secciones:</p> <ol> <li> <p>Dashboard:</p> <ul> <li>Estad\u00edsticas generales</li> <li>Gr\u00e1ficos con Chart.js</li> <li>Actividad reciente</li> </ul> </li> <li> <p>Gesti\u00f3n de Usuarios:</p> <ul> <li>Lista de usuarios</li> <li>Crear/editar/eliminar usuarios</li> <li>Filtros y b\u00fasqueda</li> </ul> </li> <li> <p>Gesti\u00f3n de Contenido:</p> <ul> <li>CRUD de art\u00edculos</li> <li>Subida de im\u00e1genes</li> <li>Editor de texto enriquecido (usando Tiptap o similar)</li> </ul> </li> </ol> <p>Tecnolog\u00edas Recomendadas</p> <ul> <li>Vue Router para la navegaci\u00f3n</li> <li>Pinia para el estado global</li> <li>Axios para peticiones HTTP</li> <li>Vuetify o PrimeVue para componentes UI</li> </ul>"},{"location":"proyecto/ejercicios/#ejercicio-5-juego-de-memoria","title":"Ejercicio 5: Juego de Memoria","text":"<p>Implementa un juego de memoria con las siguientes caracter\u00edsticas:</p> <ol> <li>Tablero de cartas (ej: 4x4, 6x6)</li> <li>Voltear cartas por turnos</li> <li>Encontrar parejas iguales</li> <li>Contador de movimientos</li> <li>Temporizador</li> <li>Mejores puntuaciones (guardadas en localStorage)</li> </ol> <p>Extras: - Diferentes niveles de dificultad - Efectos de sonido - Animaciones al voltear cartas - Modo multijugador</p>"},{"location":"proyecto/ejercicios/#proyecto-final-aplicacion-de-notas","title":"Proyecto Final: Aplicaci\u00f3n de Notas","text":"<p>Desarrolla una aplicaci\u00f3n completa de toma de notas con las siguientes caracter\u00edsticas:</p>"},{"location":"proyecto/ejercicios/#backend-simulado-con-json-server-o-similar","title":"Backend (simulado con JSON Server o similar):","text":"<ul> <li>Autenticaci\u00f3n de usuarios</li> <li>CRUD de notas</li> <li>Categor\u00edas/etiquetas</li> <li>B\u00fasqueda y filtrado</li> </ul>"},{"location":"proyecto/ejercicios/#frontend","title":"Frontend:","text":"<ol> <li>Autenticaci\u00f3n:</li> <li>Registro e inicio de sesi\u00f3n</li> <li>Recuperaci\u00f3n de contrase\u00f1a</li> <li> <p>Perfil de usuario</p> </li> <li> <p>Notas:</p> </li> <li>Lista de notas con vista previa</li> <li>Editor de notas enriquecido</li> <li>Organizaci\u00f3n por carpetas/etiquetas</li> <li>B\u00fasqueda y filtros</li> <li> <p>Exportar/importar notas</p> </li> <li> <p>Configuraci\u00f3n:</p> </li> <li>Tema claro/oscuro</li> <li>Tipograf\u00eda</li> <li>Notificaciones</li> </ol>"},{"location":"proyecto/ejercicios/#tecnologias-a-utilizar","title":"Tecnolog\u00edas a Utilizar:","text":"<ul> <li>Vue 3 + Composition API</li> <li>Vue Router</li> <li>Pinia para gesti\u00f3n de estado</li> <li>Vuetify/Quasar para UI</li> <li>Axios para peticiones HTTP</li> <li>Markdown para el formato de notas</li> <li>IndexedDB para almacenamiento offline</li> </ul>"},{"location":"proyecto/ejercicios/#evaluacion-de-proyectos","title":"Evaluaci\u00f3n de Proyectos","text":"<p>Cada proyecto ser\u00e1 evaluado seg\u00fan los siguientes criterios:</p> <ol> <li>Funcionalidad (40%):</li> <li>Cumplimiento de requisitos</li> <li>Correcci\u00f3n de errores</li> <li> <p>Rendimiento</p> </li> <li> <p>C\u00f3digo (30%):</p> </li> <li>Estructura y organizaci\u00f3n</li> <li>Legibilidad</li> <li>Buenas pr\u00e1cticas</li> <li> <p>Manejo de errores</p> </li> <li> <p>UI/UX (20%):</p> </li> <li>Dise\u00f1o atractivo</li> <li>Usabilidad</li> <li> <p>Responsive design</p> </li> <li> <p>Documentaci\u00f3n (10%):</p> </li> <li>README.md</li> <li>Comentarios en el c\u00f3digo</li> <li>Gu\u00eda de instalaci\u00f3n</li> </ol>"},{"location":"proyecto/ejercicios/#recursos-adicionales","title":"Recursos Adicionales","text":"<ol> <li>Vue 3 Documentation</li> <li>Pinia Documentation</li> <li>Vue Router</li> <li>VueUse - Colecci\u00f3n de utilidades para Vue 3</li> <li>Vite - Herramienta de construcci\u00f3n</li> </ol>"},{"location":"proyecto/ejercicios/#entregables","title":"Entregables","text":"<p>Para cada ejercicio, entrega: 1. C\u00f3digo fuente en un repositorio Git 2. Instrucciones de instalaci\u00f3n y ejecuci\u00f3n 3. Capturas de pantalla o demo en vivo (opcional)</p>"},{"location":"proyecto/ejercicios/#preguntas-frecuentes","title":"Preguntas Frecuentes","text":""},{"location":"proyecto/ejercicios/#como-manejo-el-estado-global-en-mi-aplicacion","title":"\u00bfC\u00f3mo manejo el estado global en mi aplicaci\u00f3n?","text":"<p>Usa Pinia para la gesti\u00f3n del estado global. Crea stores l\u00f3gicos (ej: <code>useAuthStore</code>, <code>useNotesStore</code>) y \u00fasalos en tus componentes.</p>"},{"location":"proyecto/ejercicios/#cual-es-la-mejor-forma-de-hacer-peticiones-http","title":"\u00bfCu\u00e1l es la mejor forma de hacer peticiones HTTP?","text":"<p>Puedes usar Axios o la Fetch API nativa. Crea un servicio o composable que maneje todas las llamadas a la API.</p>"},{"location":"proyecto/ejercicios/#como-implemento-la-autenticacion","title":"\u00bfC\u00f3mo implemento la autenticaci\u00f3n?","text":"<ol> <li>Crea un store de autenticaci\u00f3n con Pinia</li> <li>Usa JWT para manejar sesiones</li> <li>Protege rutas con guards del router</li> <li>Almacena el token en cookies seguras</li> </ol>"},{"location":"proyecto/ejercicios/#como-mejoro-el-rendimiento-de-mi-aplicacion","title":"\u00bfC\u00f3mo mejoro el rendimiento de mi aplicaci\u00f3n?","text":"<ul> <li>Usa <code>v-once</code> para contenido est\u00e1tico</li> <li>Implementa lazy loading para rutas</li> <li>Usa <code>v-memo</code> para listas grandes</li> <li>Aprovecha la composici\u00f3n para reutilizar l\u00f3gica</li> </ul>"},{"location":"proyecto/estructura/","title":"4.1 Estructura de un Proyecto Vue 3","text":""},{"location":"proyecto/estructura/#estructura-recomendada","title":"Estructura Recomendada","text":"<pre><code>mi-proyecto/\n\u251c\u2500\u2500 public/                  # Archivos est\u00e1ticos que se copian sin procesar\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 index.html           # Plantilla HTML principal\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 assets/             # Recursos est\u00e1ticos (im\u00e1genes, fuentes, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 logo.png\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 components/         # Componentes reutilizables\n\u2502   \u2502   \u251c\u2500\u2500 ui/              # Componentes de UI gen\u00e9ricos (botones, tarjetas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 shared/          # Componentes compartidos entre p\u00e1ginas\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 composables/        # Composable functions (l\u00f3gica reutilizable)\n\u2502   \u2502   \u251c\u2500\u2500 useApi.js       # L\u00f3gica para llamadas a API\n\u2502   \u2502   \u2514\u2500\u2500 useAuth.js       # L\u00f3gica de autenticaci\u00f3n\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 router/            # Configuraci\u00f3n del enrutador\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 stores/            # Almacenes Pinia\n\u2502   \u2502   \u251c\u2500\u2500 index.js         # Configuraci\u00f3n principal de Pinia\n\u2502   \u2502   \u251c\u2500\u2500 auth.store.js    # Store para autenticaci\u00f3n\n\u2502   \u2502   \u2514\u2500\u2500 tasks.store.js   # Store para tareas\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 styles/            # Estilos globales\n\u2502   \u2502   \u251c\u2500\u2500 _variables.scss  # Variables globales\n\u2502   \u2502   \u2514\u2500\u2500 main.scss        # Estilos principales\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 utils/             # Utilidades y helpers\n\u2502   \u2502   \u251c\u2500\u2500 validators.js    # Funciones de validaci\u00f3n\n\u2502   \u2502   \u2514\u2500\u2500 formatters.js    # Funciones de formateo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 views/             # Componentes de p\u00e1gina (rutas)\n\u2502   \u2502   \u251c\u2500\u2500 HomeView.vue\n\u2502   \u2502   \u251c\u2500\u2500 LoginView.vue\n\u2502   \u2502   \u2514\u2500\u2500 DashboardView.vue\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 App.vue            # Componente ra\u00edz\n\u2502   \u251c\u2500\u2500 main.js             # Punto de entrada de la aplicaci\u00f3n\n\u2502   \u2514\u2500\u2500 registerServiceWorker.js  # Configuraci\u00f3n de PWA\n\u2502\n\u251c\u2500\u2500 .env                   # Variables de entorno\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 vite.config.js          # Configuraci\u00f3n de Vite\n</code></pre>"},{"location":"proyecto/estructura/#explicacion-de-carpetas-clave","title":"Explicaci\u00f3n de Carpetas Clave","text":""},{"location":"proyecto/estructura/#1-public","title":"1. <code>/public</code>","text":"<ul> <li>Contiene archivos est\u00e1ticos que se copian directamente al directorio de compilaci\u00f3n</li> <li><code>index.html</code> es la plantilla base de la aplicaci\u00f3n</li> </ul>"},{"location":"proyecto/estructura/#2-srccomponents","title":"2. <code>/src/components</code>","text":"<ul> <li>ui/: Componentes de interfaz de usuario gen\u00e9ricos y reutilizables</li> <li>Ejemplo: <code>Button.vue</code>, <code>Card.vue</code>, <code>Modal.vue</code></li> <li>shared/: Componentes compartidos entre p\u00e1ginas</li> <li>Ejemplo: <code>Layout.vue</code>, <code>Header.vue</code>, <code>Footer.vue</code></li> </ul>"},{"location":"proyecto/estructura/#3-srccomposables","title":"3. <code>/src/composables</code>","text":"<ul> <li>Funciones l\u00f3gicas reutilizables usando la Composition API</li> <li>Ejemplo: <code>useFormValidation.js</code>, <code>usePagination.js</code></li> </ul>"},{"location":"proyecto/estructura/#4-srcstores","title":"4. <code>/src/stores</code>","text":"<ul> <li>Almacenes de Pinia para la gesti\u00f3n del estado global</li> <li>Cada archivo representa un dominio l\u00f3gico de la aplicaci\u00f3n</li> </ul>"},{"location":"proyecto/estructura/#5-srcviews","title":"5. <code>/src/views</code>","text":"<ul> <li>Componentes que representan p\u00e1ginas completas</li> <li>Mapeados a rutas en el enrutador</li> </ul>"},{"location":"proyecto/estructura/#estructura-de-un-componente-vue","title":"Estructura de un Componente Vue","text":"<pre><code>&lt;template&gt;\n  &lt;div class=\"componente\"&gt;\n    &lt;!-- Contenido del componente --&gt;\n    &lt;h1&gt;{{ titulo }}&lt;/h1&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// Importaciones\nimport { ref, computed, onMounted } from 'vue';\nimport { useStore } from '../stores';\n\n// Props\ndefineProps({\n  titulo: {\n    type: String,\n    required: true\n  }\n});\n\n// Estado reactivo\nconst contador = ref(0);\nconst store = useStore();\n\n// Computadas\nconst contadorDoble = computed(() =&gt; contador.value * 2);\n\n// M\u00e9todos\nfunction incrementar() {\n  contador.value++;\n}\n\n// Hooks del ciclo de vida\nonMounted(() =&gt; {\n  console.log('Componente montado');\n});\n\n// Exponer al template\n// En &lt;script setup&gt;, todo lo declarado est\u00e1 autom\u00e1ticamente disponible\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.componente {\n  /* Estilos con \u00e1mbito local */\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"proyecto/estructura/#convenciones-de-nombrado","title":"Convenciones de Nombrado","text":"<ol> <li>Componentes: PascalCase (ej. <code>UserProfile.vue</code>)</li> <li>Archivos JS/CSS: kebab-case (ej. <code>user-service.js</code>)</li> <li>Variables y funciones: camelCase</li> <li>Constantes: UPPER_SNAKE_CASE</li> <li>Almacenes Pinia: <code>nombre.tipo.js</code> (ej. <code>user.store.js</code>)</li> </ol>"},{"location":"proyecto/estructura/#ejercicio-estructurar-un-proyecto","title":"Ejercicio: Estructurar un Proyecto","text":"<p>Crea una estructura de proyecto para una aplicaci\u00f3n de blog con las siguientes caracter\u00edsticas:</p> <ol> <li>P\u00e1gina de inicio con lista de publicaciones</li> <li>P\u00e1ginas de categor\u00edas</li> <li>Sistema de comentarios</li> <li>Panel de administraci\u00f3n</li> <li>Autenticaci\u00f3n de usuarios</li> </ol> <pre><code>blog-vue/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 ui/           # Componentes de UI reutilizables\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.vue\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.vue\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Modal.vue\n\u2502   \u2502   \u2514\u2500\u2500 shared/       # Componentes compartidos\n\u2502   \u2502       \u251c\u2500\u2500 Layout.vue\n\u2502   \u2502       \u251c\u2500\u2500 Header.vue\n\u2502   \u2502       \u2514\u2500\u2500 Footer.vue\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 composables/     # L\u00f3gica reutilizable\n\u2502   \u2502   \u251c\u2500\u2500 useApi.js\n\u2502   \u2502   \u251c\u2500\u2500 useAuth.js\n\u2502   \u2502   \u2514\u2500\u2500 useForm.js\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 router/          # Configuraci\u00f3n del enrutador\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 stores/          # Almacenes Pinia\n\u2502   \u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2502   \u251c\u2500\u2500 posts.store.js\n\u2502   \u2502   \u251c\u2500\u2500 categories.store.js\n\u2502   \u2502   \u251c\u2500\u2500 comments.store.js\n\u2502   \u2502   \u2514\u2500\u2500 auth.store.js\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 views/           # Vistas/p\u00e1ginas\n\u2502   \u2502   \u251c\u2500\u2500 public/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 HomeView.vue\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PostView.vue\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 CategoryView.vue\n\u2502   \u2502   \u2514\u2500\u2500 admin/\n\u2502   \u2502       \u251c\u2500\u2500 DashboardView.vue\n\u2502   \u2502       \u251c\u2500\u2500 PostsView.vue\n\u2502   \u2502       \u2514\u2500\u2500 UsersView.vue\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 App.vue\n\u2502   \u2514\u2500\u2500 main.js\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"proyecto/estructura/#preguntas-de-repaso","title":"Preguntas de Repaso","text":"<ol> <li>\u00bfPor qu\u00e9 es importante organizar los componentes en subcarpetas como <code>ui/</code> y <code>shared/</code>?</li> <li>\u00bfCu\u00e1l es la ventaja de usar la carpeta <code>composables/</code>?</li> <li>\u00bfPor qu\u00e9 separar las vistas p\u00fablicas de las de administraci\u00f3n?</li> <li>\u00bfC\u00f3mo manejar\u00edas los estilos globales vs estilos de componente?</li> </ol> <p>En la siguiente secci\u00f3n trabajaremos en ejercicios pr\u00e1cticos para aplicar estos conceptos.</p>"}]}